
GateWay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000126c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  0000126c  00001300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000057  008000e8  008000e8  00001388  2**0
                  ALLOC
  3 .stab         000039fc  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000229f  00000000  00000000  00004d84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 08 	call	0x1180	; 0x1180 <main>
      8a:	0c 94 34 09 	jmp	0x1268	; 0x1268 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC>:
      92:	88 23       	and	r24, r24
      94:	19 f0       	breq	.+6      	; 0x9c <ADC+0xa>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	21 f4       	brne	.+8      	; 0xa2 <ADC+0x10>
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <ADC+0xe>
      9c:	37 9a       	sbi	0x06, 7	; 6
      9e:	08 95       	ret
      a0:	37 98       	cbi	0x06, 7	; 6
      a2:	08 95       	ret

000000a4 <ADC_Conversion>:
	case DISABLE:
		CLEAR_BIT(ADCSRA, 7);
		break;
	}
}
void ADC_Conversion(const CONV_MODE_t MODE, const ADC_CH_t ADC_CH) {
      a4:	98 2f       	mov	r25, r24
	ADMUX &= 0XF0;		/* Clear First 4 Bits */
      a6:	87 b1       	in	r24, 0x07	; 7
      a8:	80 7f       	andi	r24, 0xF0	; 240
      aa:	87 b9       	out	0x07, r24	; 7
	ADMUX |= ADC_CH;	/* Select Required Channel */
      ac:	87 b1       	in	r24, 0x07	; 7
      ae:	86 2b       	or	r24, r22
      b0:	87 b9       	out	0x07, r24	; 7
	switch (MODE) {
      b2:	99 23       	and	r25, r25
      b4:	19 f0       	breq	.+6      	; 0xbc <ADC_Conversion+0x18>
      b6:	91 30       	cpi	r25, 0x01	; 1
      b8:	21 f4       	brne	.+8      	; 0xc2 <ADC_Conversion+0x1e>
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <ADC_Conversion+0x1c>
	case START:
		SET_BIT(ADCSRA, 6);
      bc:	36 9a       	sbi	0x06, 6	; 6
      be:	08 95       	ret
		break;
	case STOP:
		CLEAR_BIT(ADCSRA, 6);
      c0:	36 98       	cbi	0x06, 6	; 6
      c2:	08 95       	ret

000000c4 <ADC_Interrupt>:
		break;
	}
}
void ADC_Interrupt(const MODE_t MODE) {
	switch (MODE) {
      c4:	88 23       	and	r24, r24
      c6:	19 f0       	breq	.+6      	; 0xce <ADC_Interrupt+0xa>
      c8:	81 30       	cpi	r24, 0x01	; 1
      ca:	21 f4       	brne	.+8      	; 0xd4 <ADC_Interrupt+0x10>
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <ADC_Interrupt+0xe>
	case ENABLE:
		SET_BIT(ADCSRA, 3);
      ce:	33 9a       	sbi	0x06, 3	; 6
      d0:	08 95       	ret
		break;
	case DISABLE:
		CLEAR_BIT(ADCSRA, 3);
      d2:	33 98       	cbi	0x06, 3	; 6
      d4:	08 95       	ret

000000d6 <ADC_Set_Prescaler>:
		break;
	}
}
void ADC_Set_Prescaler(const PRESCALER_t PRESCALER){
	ADCSRA &= 0XF8;
      d6:	96 b1       	in	r25, 0x06	; 6
      d8:	98 7f       	andi	r25, 0xF8	; 248
      da:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= PRESCALER;
      dc:	96 b1       	in	r25, 0x06	; 6
      de:	98 2b       	or	r25, r24
      e0:	96 b9       	out	0x06, r25	; 6
}
      e2:	08 95       	ret

000000e4 <ADC_Read_Flag>:
BOOL_t ADC_Read_Flag(void){
	BOOL_t Flag = FALSE;
	if(GET_BIT(ADCSRA, 4)){
      e4:	86 b1       	in	r24, 0x06	; 6
      e6:	82 95       	swap	r24
		Flag = TRUE;
	}
	return Flag;
}
      e8:	81 70       	andi	r24, 0x01	; 1
      ea:	08 95       	ret

000000ec <ADC_Clear_Flag>:
void ADC_Clear_Flag(void){
	CLEAR_BIT(ADCSRA, 4);
      ec:	34 98       	cbi	0x06, 4	; 6
}
      ee:	08 95       	ret

000000f0 <ADC_Init>:
void ADC_Init(void){
	SET_BIT(ADMUX, 6); /* External Vref +5 Volt */
      f0:	3e 9a       	sbi	0x07, 6	; 7
}
      f2:	08 95       	ret

000000f4 <ADC_Read>:
UINT16_t ADC_Read(void){
	UINT16_t Reading = 0;
	Reading = ADCL;
      f4:	24 b1       	in	r18, 0x04	; 4
      f6:	30 e0       	ldi	r19, 0x00	; 0
    Reading = ((UINT16_t)(ADCH << 8)) | Reading;
      f8:	45 b1       	in	r20, 0x05	; 5
      fa:	94 2f       	mov	r25, r20
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	28 2b       	or	r18, r24
     100:	39 2b       	or	r19, r25
    return Reading;
}
     102:	c9 01       	movw	r24, r18
     104:	08 95       	ret

00000106 <CO_SCH_Delete_Task>:
static TASK_t CO_SCH_Task[CO_SCH_MAX_TASKS];
static volatile BOOL_t CO_SCH_Update = FALSE;
/******************************************************************************/
void
CO_SCH_Delete_Task(const UINT8_t ID){
     if(ID < CO_SCH_MAX_TASKS && CO_SCH_Task[ID].pTask != NULL_PTR){
     106:	86 30       	cpi	r24, 0x06	; 6
     108:	e8 f4       	brcc	.+58     	; 0x144 <CO_SCH_Delete_Task+0x3e>
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	fc 01       	movw	r30, r24
     10e:	ee 0f       	add	r30, r30
     110:	ff 1f       	adc	r31, r31
     112:	e8 0f       	add	r30, r24
     114:	f9 1f       	adc	r31, r25
     116:	df 01       	movw	r26, r30
     118:	aa 0f       	add	r26, r26
     11a:	bb 1f       	adc	r27, r27
     11c:	a6 51       	subi	r26, 0x16	; 22
     11e:	bf 4f       	sbci	r27, 0xFF	; 255
     120:	8d 91       	ld	r24, X+
     122:	9c 91       	ld	r25, X
     124:	11 97       	sbiw	r26, 0x01	; 1
     126:	89 2b       	or	r24, r25
     128:	69 f0       	breq	.+26     	; 0x144 <CO_SCH_Delete_Task+0x3e>
        CO_SCH_Task[ID].pTask = NULL_PTR;
     12a:	11 96       	adiw	r26, 0x01	; 1
     12c:	1c 92       	st	X, r1
     12e:	1e 92       	st	-X, r1
        CO_SCH_Task[ID].Run = 0;
     130:	15 96       	adiw	r26, 0x05	; 5
     132:	1c 92       	st	X, r1
     134:	15 97       	sbiw	r26, 0x05	; 5
        CO_SCH_Task[ID].Delay = 0;
     136:	13 96       	adiw	r26, 0x03	; 3
     138:	1c 92       	st	X, r1
        CO_SCH_Task[ID].Period = 0;
     13a:	ee 0f       	add	r30, r30
     13c:	ff 1f       	adc	r31, r31
     13e:	e4 51       	subi	r30, 0x14	; 20
     140:	ff 4f       	sbci	r31, 0xFF	; 255
     142:	10 82       	st	Z, r1
     144:	08 95       	ret

00000146 <CO_SCH_Add_Task>:
}
/******************************************************************************/
void
CO_SCH_Add_Task(void (*const PTASK)(void),
                     const UINT8_t DELAY,
                     const UINT8_t PERIOD){
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	ec 01       	movw	r28, r24

     static UINT8_t Id = 0;
     if(Id < CO_SCH_MAX_TASKS){
     14c:	20 91 e9 00 	lds	r18, 0x00E9
     150:	26 30       	cpi	r18, 0x06	; 6
     152:	f0 f4       	brcc	.+60     	; 0x190 <CO_SCH_Add_Task+0x4a>
        CO_SCH_Task[Id].pTask = PTASK;
     154:	82 2f       	mov	r24, r18
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	fc 01       	movw	r30, r24
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	e8 0f       	add	r30, r24
     160:	f9 1f       	adc	r31, r25
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	df 01       	movw	r26, r30
     168:	a6 51       	subi	r26, 0x16	; 22
     16a:	bf 4f       	sbci	r27, 0xFF	; 255
     16c:	11 96       	adiw	r26, 0x01	; 1
     16e:	dc 93       	st	X, r29
     170:	ce 93       	st	-X, r28
        CO_SCH_Task[Id].Delay = 1 + DELAY;
     172:	6f 5f       	subi	r22, 0xFF	; 255
     174:	13 96       	adiw	r26, 0x03	; 3
     176:	6c 93       	st	X, r22
     178:	13 97       	sbiw	r26, 0x03	; 3
        CO_SCH_Task[Id].Period = PERIOD;
     17a:	e4 51       	subi	r30, 0x14	; 20
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	40 83       	st	Z, r20
        CO_SCH_Task[Id].Run = 0;
     180:	15 96       	adiw	r26, 0x05	; 5
     182:	1c 92       	st	X, r1
     184:	15 97       	sbiw	r26, 0x05	; 5
        CO_SCH_Task[Id].Id = Id;
     186:	14 96       	adiw	r26, 0x04	; 4
     188:	2c 93       	st	X, r18
        Id++;
     18a:	2f 5f       	subi	r18, 0xFF	; 255
     18c:	20 93 e9 00 	sts	0x00E9, r18
     }
     else{
        /* Error: Scheduler is Full */
     }
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <CO_SCH_Dispatch_Tasks>:
/******************************************************************************/
void
CO_SCH_Dispatch_Tasks(void){
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
	UINT8_t Id;
     if(TRUE == CO_SCH_Update){
     19c:	80 91 e8 00 	lds	r24, 0x00E8
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	69 f5       	brne	.+90     	; 0x1fe <CO_SCH_Dispatch_Tasks+0x68>
     1a4:	ea ee       	ldi	r30, 0xEA	; 234
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
/******************************************************************************/
static void
CO_SCH_Update_Tasks(void){
	UINT8_t Id;
	for (Id = 0; Id < CO_SCH_MAX_TASKS; Id++) {
		if (CO_SCH_Task[Id].pTask != NULL_PTR) {
     1a8:	80 81       	ld	r24, Z
     1aa:	91 81       	ldd	r25, Z+1	; 0x01
     1ac:	89 2b       	or	r24, r25
     1ae:	51 f0       	breq	.+20     	; 0x1c4 <CO_SCH_Dispatch_Tasks+0x2e>
			CO_SCH_Task[Id].Delay--;
     1b0:	83 81       	ldd	r24, Z+3	; 0x03
     1b2:	81 50       	subi	r24, 0x01	; 1
     1b4:	83 83       	std	Z+3, r24	; 0x03
			if (ENDED == CO_SCH_Task[Id].Delay) {
     1b6:	88 23       	and	r24, r24
     1b8:	29 f4       	brne	.+10     	; 0x1c4 <CO_SCH_Dispatch_Tasks+0x2e>
				CO_SCH_Task[Id].Run++;
     1ba:	85 81       	ldd	r24, Z+5	; 0x05
     1bc:	8f 5f       	subi	r24, 0xFF	; 255
     1be:	85 83       	std	Z+5, r24	; 0x05
				CO_SCH_Task[Id].Delay = CO_SCH_Task[Id].Period;
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	83 83       	std	Z+3, r24	; 0x03
     1c4:	36 96       	adiw	r30, 0x06	; 6
}
/******************************************************************************/
static void
CO_SCH_Update_Tasks(void){
	UINT8_t Id;
	for (Id = 0; Id < CO_SCH_MAX_TASKS; Id++) {
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	ee 30       	cpi	r30, 0x0E	; 14
     1ca:	f8 07       	cpc	r31, r24
     1cc:	69 f7       	brne	.-38     	; 0x1a8 <CO_SCH_Dispatch_Tasks+0x12>
     1ce:	ef 01       	movw	r28, r30
     1d0:	a4 97       	sbiw	r28, 0x24	; 36
     1d2:	10 e0       	ldi	r17, 0x00	; 0
CO_SCH_Dispatch_Tasks(void){
	UINT8_t Id;
     if(TRUE == CO_SCH_Update){
        CO_SCH_Update_Tasks();
        for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
            if(CO_SCH_Task[Id].Run > 0){
     1d4:	8d 81       	ldd	r24, Y+5	; 0x05
     1d6:	88 23       	and	r24, r24
     1d8:	61 f0       	breq	.+24     	; 0x1f2 <CO_SCH_Dispatch_Tasks+0x5c>
               CO_SCH_Task[Id].pTask();
     1da:	e8 81       	ld	r30, Y
     1dc:	f9 81       	ldd	r31, Y+1	; 0x01
     1de:	09 95       	icall
               CO_SCH_Task[Id].Run--;
     1e0:	8d 81       	ldd	r24, Y+5	; 0x05
     1e2:	81 50       	subi	r24, 0x01	; 1
     1e4:	8d 83       	std	Y+5, r24	; 0x05
               if(ENDED == CO_SCH_Task[Id].Period){
     1e6:	8a 81       	ldd	r24, Y+2	; 0x02
     1e8:	88 23       	and	r24, r24
     1ea:	19 f4       	brne	.+6      	; 0x1f2 <CO_SCH_Dispatch_Tasks+0x5c>
                  CO_SCH_Delete_Task(Id);
     1ec:	81 2f       	mov	r24, r17
     1ee:	0e 94 83 00 	call	0x106	; 0x106 <CO_SCH_Delete_Task>
void
CO_SCH_Dispatch_Tasks(void){
	UINT8_t Id;
     if(TRUE == CO_SCH_Update){
        CO_SCH_Update_Tasks();
        for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     1f2:	1f 5f       	subi	r17, 0xFF	; 255
     1f4:	26 96       	adiw	r28, 0x06	; 6
     1f6:	16 30       	cpi	r17, 0x06	; 6
     1f8:	69 f7       	brne	.-38     	; 0x1d4 <CO_SCH_Dispatch_Tasks+0x3e>
            }
            else{
               /* Task is not Ready */
            }
        }
        CO_SCH_Update = FALSE;
     1fa:	10 92 e8 00 	sts	0x00E8, r1
     }
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	08 95       	ret

00000206 <__vector_10>:
void CO_SCH_Sleep(void){
     /* To Do: */
}
#endif
/******************************************************************************/
ISR(TIMER0_COMP_VECT){
     206:	1f 92       	push	r1
     208:	0f 92       	push	r0
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	0f 92       	push	r0
     20e:	11 24       	eor	r1, r1
     210:	8f 93       	push	r24
     CO_SCH_Update = TRUE;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 e8 00 	sts	0x00E8, r24
}
     218:	8f 91       	pop	r24
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <CO_SCH_Stop>:
	GIE;
}
/******************************************************************************/
void
CO_SCH_Stop(void){
	GIC;
     224:	8f b7       	in	r24, 0x3f	; 63
     226:	8f 77       	andi	r24, 0x7F	; 127
     228:	8f bf       	out	0x3f, r24	; 63
	TMR0_Set_Prescaler(TMR0_NO_CLK);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 39 08 	call	0x1072	; 0x1072 <TMR0_Set_Prescaler>
}
     230:	08 95       	ret

00000232 <CO_SCH_Start>:
}
/******************************************************************************/
void
CO_SCH_Start(void){
     /* To Do: Enable Interrupt Here */
	TMR0_Set_Prescaler(TMR0_DF64);				/* Tick = 32 us */
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	0e 94 39 08 	call	0x1072	; 0x1072 <TMR0_Set_Prescaler>
	TMR0_Set_Buffer(TMR0_OCR, TMR_INT_CYCLE); 		/* 1 ms */
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	6d e7       	ldi	r22, 0x7D	; 125
     23c:	0e 94 83 08 	call	0x1106	; 0x1106 <TMR0_Set_Buffer>
	GIE;
     240:	8f b7       	in	r24, 0x3f	; 63
     242:	80 68       	ori	r24, 0x80	; 128
     244:	8f bf       	out	0x3f, r24	; 63
}
     246:	08 95       	ret

00000248 <CO_SCH_Init>:
        /* Error: Undefined Task */
     }
}
/******************************************************************************/
void
CO_SCH_Init(void){
     248:	1f 93       	push	r17
	 UINT8_t Id;
	 /* ToDo: Disable Global Interrupt */
	 GIC;
     24a:	8f b7       	in	r24, 0x3f	; 63
     24c:	8f 77       	andi	r24, 0x7F	; 127
     24e:	8f bf       	out	0x3f, r24	; 63
     250:	10 e0       	ldi	r17, 0x00	; 0
     for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
         CO_SCH_Delete_Task(Id);
     252:	81 2f       	mov	r24, r17
     254:	0e 94 83 00 	call	0x106	; 0x106 <CO_SCH_Delete_Task>
void
CO_SCH_Init(void){
	 UINT8_t Id;
	 /* ToDo: Disable Global Interrupt */
	 GIC;
     for(Id = 0; Id < CO_SCH_MAX_TASKS; Id++){
     258:	1f 5f       	subi	r17, 0xFF	; 255
     25a:	16 30       	cpi	r17, 0x06	; 6
     25c:	d1 f7       	brne	.-12     	; 0x252 <CO_SCH_Init+0xa>
         CO_SCH_Delete_Task(Id);
     }
     /* To Do: Init Timer Here */
     TMR0_Init();
     25e:	0e 94 8c 08 	call	0x1118	; 0x1118 <TMR0_Init>
     TMR0_Mode(TMR0_CTC);
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	0e 94 40 08 	call	0x1080	; 0x1080 <TMR0_Mode>
     TMR0_Set_Prescaler(TMR0_NO_CLK);
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 39 08 	call	0x1072	; 0x1072 <TMR0_Set_Prescaler>
     TMR0_Set_Buffer(TMR0_OCR, TMR_INT_CYCLE); 		/* 1 ms */
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	6d e7       	ldi	r22, 0x7D	; 125
     272:	0e 94 83 08 	call	0x1106	; 0x1106 <TMR0_Set_Buffer>
     TMR0_INT(TMR0_OC_INT_ENABLE);
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TMR0_INT>
}
     27c:	1f 91       	pop	r17
     27e:	08 95       	ret

00000280 <DIO_WRITE_PIN_VALUE>:
			break;
		}
	}
}
/****************************************************************************/
void DIO_WRITE_PIN_VALUE(const DIO_PIN_ID_t PIN_ID, const DIO_PIN_STATE_t PIN_STATE){
     280:	38 2f       	mov	r19, r24
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
     282:	e8 2f       	mov	r30, r24
     284:	e6 95       	lsr	r30
     286:	e6 95       	lsr	r30
     288:	e6 95       	lsr	r30
	switch (PIN_STATE) {
     28a:	66 23       	and	r22, r22
     28c:	b1 f0       	breq	.+44     	; 0x2ba <DIO_WRITE_PIN_VALUE+0x3a>
     28e:	61 30       	cpi	r22, 0x01	; 1
     290:	41 f5       	brne	.+80     	; 0x2e2 <DIO_WRITE_PIN_VALUE+0x62>
	case DIO_PIN_STATE_HIGH:
		SET_BIT(*Reg[Port_Id], PIN_ID % 8);
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	ee 0f       	add	r30, r30
     296:	ff 1f       	adc	r31, r31
     298:	e9 53       	subi	r30, 0x39	; 57
     29a:	ff 4f       	sbci	r31, 0xFF	; 255
     29c:	01 90       	ld	r0, Z+
     29e:	f0 81       	ld	r31, Z
     2a0:	e0 2d       	mov	r30, r0
     2a2:	20 81       	ld	r18, Z
     2a4:	37 70       	andi	r19, 0x07	; 7
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_WRITE_PIN_VALUE+0x30>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	3a 95       	dec	r19
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_WRITE_PIN_VALUE+0x2c>
     2b4:	28 2b       	or	r18, r24
     2b6:	20 83       	st	Z, r18
     2b8:	08 95       	ret
		break;
	case DIO_PIN_STATE_LOW:
		CLEAR_BIT(*Reg[Port_Id], PIN_ID % 8);
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	ee 0f       	add	r30, r30
     2be:	ff 1f       	adc	r31, r31
     2c0:	e9 53       	subi	r30, 0x39	; 57
     2c2:	ff 4f       	sbci	r31, 0xFF	; 255
     2c4:	01 90       	ld	r0, Z+
     2c6:	f0 81       	ld	r31, Z
     2c8:	e0 2d       	mov	r30, r0
     2ca:	20 81       	ld	r18, Z
     2cc:	37 70       	andi	r19, 0x07	; 7
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_WRITE_PIN_VALUE+0x58>
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	3a 95       	dec	r19
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_WRITE_PIN_VALUE+0x54>
     2dc:	80 95       	com	r24
     2de:	82 23       	and	r24, r18
     2e0:	80 83       	st	Z, r24
     2e2:	08 95       	ret

000002e4 <DIO_INIT>:
#include "STD_MEMORY_MAP.h"
#include "DIO.h"
/****************************************************************************/
void
DIO_INIT(void)
{
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	10 e0       	ldi	r17, 0x00	; 0
     2f0:	c0 e0       	ldi	r28, 0x00	; 0
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
		Port_Id = Pin_Id / 8;
		switch (Pin_Direction[Pin_Id]) {
		case DIO_PIN_DIRECTION_OUTPUT:
			SET_BIT(*Reg[Port_Id], Pin_Id % 8);
     2f4:	51 e0       	ldi	r21, 0x01	; 1
     2f6:	e5 2e       	mov	r14, r21
     2f8:	f1 2c       	mov	r15, r1
{
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
		Port_Id = Pin_Id / 8;
     2fa:	21 2f       	mov	r18, r17
     2fc:	26 95       	lsr	r18
     2fe:	26 95       	lsr	r18
     300:	26 95       	lsr	r18
		switch (Pin_Direction[Pin_Id]) {
     302:	81 2f       	mov	r24, r17
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	fc 01       	movw	r30, r24
     308:	e8 57       	subi	r30, 0x78	; 120
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	e0 81       	ld	r30, Z
     30e:	e1 30       	cpi	r30, 0x01	; 1
     310:	31 f0       	breq	.+12     	; 0x31e <DIO_INIT+0x3a>
     312:	e1 30       	cpi	r30, 0x01	; 1
     314:	c8 f0       	brcs	.+50     	; 0x348 <DIO_INIT+0x64>
     316:	e2 30       	cpi	r30, 0x02	; 2
     318:	09 f0       	breq	.+2      	; 0x31c <DIO_INIT+0x38>
     31a:	49 c0       	rjmp	.+146    	; 0x3ae <DIO_INIT+0xca>
     31c:	2e c0       	rjmp	.+92     	; 0x37a <DIO_INIT+0x96>
		case DIO_PIN_DIRECTION_OUTPUT:
			SET_BIT(*Reg[Port_Id], Pin_Id % 8);
     31e:	e2 2f       	mov	r30, r18
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	e1 53       	subi	r30, 0x31	; 49
     328:	ff 4f       	sbci	r31, 0xFF	; 255
     32a:	01 90       	ld	r0, Z+
     32c:	f0 81       	ld	r31, Z
     32e:	e0 2d       	mov	r30, r0
     330:	20 81       	ld	r18, Z
     332:	87 70       	andi	r24, 0x07	; 7
     334:	90 70       	andi	r25, 0x00	; 0
     336:	a7 01       	movw	r20, r14
     338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_INIT+0x5a>
     33a:	44 0f       	add	r20, r20
     33c:	55 1f       	adc	r21, r21
     33e:	8a 95       	dec	r24
     340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_INIT+0x56>
     342:	24 2b       	or	r18, r20
     344:	20 83       	st	Z, r18
     346:	33 c0       	rjmp	.+102    	; 0x3ae <DIO_INIT+0xca>
			break;
		case DIO_PIN_DIRECTION_INPUT_PULL_UP:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
     348:	e2 2f       	mov	r30, r18
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	e1 53       	subi	r30, 0x31	; 49
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	01 90       	ld	r0, Z+
     356:	f0 81       	ld	r31, Z
     358:	e0 2d       	mov	r30, r0
     35a:	20 81       	ld	r18, Z
     35c:	87 70       	andi	r24, 0x07	; 7
     35e:	90 70       	andi	r25, 0x00	; 0
     360:	a7 01       	movw	r20, r14
     362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_INIT+0x84>
     364:	44 0f       	add	r20, r20
     366:	55 1f       	adc	r21, r21
     368:	8a 95       	dec	r24
     36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_INIT+0x80>
     36c:	ca 01       	movw	r24, r20
     36e:	80 95       	com	r24
     370:	82 23       	and	r24, r18
     372:	80 83       	st	Z, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_HIGH);
     374:	81 2f       	mov	r24, r17
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	18 c0       	rjmp	.+48     	; 0x3aa <DIO_INIT+0xc6>
			break;
		case DIO_PIN_DIRECTION_INPUT_FLOAT:
			CLEAR_BIT(*Reg[Port_Id], Pin_Id % 8);
     37a:	e2 2f       	mov	r30, r18
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	e1 53       	subi	r30, 0x31	; 49
     384:	ff 4f       	sbci	r31, 0xFF	; 255
     386:	01 90       	ld	r0, Z+
     388:	f0 81       	ld	r31, Z
     38a:	e0 2d       	mov	r30, r0
     38c:	20 81       	ld	r18, Z
     38e:	87 70       	andi	r24, 0x07	; 7
     390:	90 70       	andi	r25, 0x00	; 0
     392:	a7 01       	movw	r20, r14
     394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_INIT+0xb6>
     396:	44 0f       	add	r20, r20
     398:	55 1f       	adc	r21, r21
     39a:	8a 95       	dec	r24
     39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_INIT+0xb2>
     39e:	ca 01       	movw	r24, r20
     3a0:	80 95       	com	r24
     3a2:	82 23       	and	r24, r18
     3a4:	80 83       	st	Z, r24
			DIO_WRITE_PIN_VALUE(Pin_Id, DIO_PIN_STATE_LOW);
     3a6:	81 2f       	mov	r24, r17
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
DIO_INIT(void)
{
	DIO_PIN_ID_t Pin_Id;
	DIO_PORT_ID_t Port_Id;
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { DDRA_ADD, DDRB_ADD, DDRC_ADD, DDRD_ADD };
	for (Pin_Id = DIO_PINA0; Pin_Id < DIO_MAX_PINS; Pin_Id++) {
     3ae:	1f 5f       	subi	r17, 0xFF	; 255
     3b0:	21 96       	adiw	r28, 0x01	; 1
     3b2:	c0 32       	cpi	r28, 0x20	; 32
     3b4:	d1 05       	cpc	r29, r1
     3b6:	09 f0       	breq	.+2      	; 0x3ba <DIO_INIT+0xd6>
     3b8:	a0 cf       	rjmp	.-192    	; 0x2fa <DIO_INIT+0x16>
		break;
		default:
			break;
		}
	}
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	08 95       	ret

000003c6 <DIO_READ_PIN_VALUE>:
	default:
		break;
	}
}
/****************************************************************************/
DIO_PIN_STATE_t DIO_READ_PIN_VALUE(const DIO_PIN_ID_t PIN_ID){
     3c6:	28 2f       	mov	r18, r24
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	DIO_PORT_ID_t Port_Id = PIN_ID / 8;
	DIO_PIN_STATE_t State = DIO_PIN_STATE_LOW;
	if(DIO_PIN_STATE_HIGH == GET_BIT(*Reg[Port_Id], PIN_ID % 8)){
     3c8:	e8 2f       	mov	r30, r24
     3ca:	e6 95       	lsr	r30
     3cc:	e6 95       	lsr	r30
     3ce:	e6 95       	lsr	r30
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	ee 0f       	add	r30, r30
     3d4:	ff 1f       	adc	r31, r31
     3d6:	e1 54       	subi	r30, 0x41	; 65
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
     3da:	01 90       	ld	r0, Z+
     3dc:	f0 81       	ld	r31, Z
     3de:	e0 2d       	mov	r30, r0
     3e0:	80 81       	ld	r24, Z
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	27 70       	andi	r18, 0x07	; 7
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_READ_PIN_VALUE+0x26>
     3e8:	95 95       	asr	r25
     3ea:	87 95       	ror	r24
     3ec:	2a 95       	dec	r18
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_READ_PIN_VALUE+0x22>
		State = DIO_PIN_STATE_HIGH;
	}
	return State;
}
     3f0:	81 70       	andi	r24, 0x01	; 1
     3f2:	08 95       	ret

000003f4 <DIO_WRITE_PORT>:
/****************************************************************************/
void DIO_WRITE_PORT(const DIO_PORT_ID_t PORT_ID, const UINT8_t VALUE){
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PORTA_ADD, PORTB_ADD, PORTC_ADD, PORTD_ADD };
	*Reg[PORT_ID] = VALUE;
     3f4:	e8 2f       	mov	r30, r24
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	ee 0f       	add	r30, r30
     3fa:	ff 1f       	adc	r31, r31
     3fc:	e9 54       	subi	r30, 0x49	; 73
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	01 90       	ld	r0, Z+
     402:	f0 81       	ld	r31, Z
     404:	e0 2d       	mov	r30, r0
     406:	60 83       	st	Z, r22
}
     408:	08 95       	ret

0000040a <DIO_Read_PORT>:
/****************************************************************************/
UINT8_t DIO_Read_PORT(const DIO_PORT_ID_t PORT_ID){
	volatile UINT8_t* const Reg[DIO_MAX_PORTS] = { PINA_ADD, PINB_ADD, PINC_ADD, PIND_ADD };
	return *Reg[PORT_ID];
     40a:	e8 2f       	mov	r30, r24
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	ee 0f       	add	r30, r30
     410:	ff 1f       	adc	r31, r31
     412:	e1 55       	subi	r30, 0x51	; 81
     414:	ff 4f       	sbci	r31, 0xFF	; 255
     416:	01 90       	ld	r0, Z+
     418:	f0 81       	ld	r31, Z
     41a:	e0 2d       	mov	r30, r0
     41c:	80 81       	ld	r24, Z
}
     41e:	08 95       	ret

00000420 <DISP_Update>:
#include "DISP.h"
ECU_RM_DATA_t ECU_RM_Tmp_Data[MAX_ECU_RM];
ECU_OD_DATA_t ECU_OD_Tmp_Data;
void DISP_Update(void){
     420:	1f 93       	push	r17
	static char StrTemp[3];

	static UINT8_t State = 0;
	switch (State) {
     422:	80 91 0e 01 	lds	r24, 0x010E
     426:	83 30       	cpi	r24, 0x03	; 3
     428:	a9 f1       	breq	.+106    	; 0x494 <DISP_Update+0x74>
     42a:	84 30       	cpi	r24, 0x04	; 4
     42c:	28 f4       	brcc	.+10     	; 0x438 <DISP_Update+0x18>
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	c9 f0       	breq	.+50     	; 0x464 <DISP_Update+0x44>
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	20 f5       	brcc	.+72     	; 0x47e <DISP_Update+0x5e>
     436:	0c c0       	rjmp	.+24     	; 0x450 <DISP_Update+0x30>
     438:	85 30       	cpi	r24, 0x05	; 5
     43a:	09 f4       	brne	.+2      	; 0x43e <DISP_Update+0x1e>
     43c:	6a c0       	rjmp	.+212    	; 0x512 <DISP_Update+0xf2>
     43e:	85 30       	cpi	r24, 0x05	; 5
     440:	a0 f1       	brcs	.+104    	; 0x4aa <DISP_Update+0x8a>
     442:	86 30       	cpi	r24, 0x06	; 6
     444:	09 f4       	brne	.+2      	; 0x448 <DISP_Update+0x28>
     446:	7c c0       	rjmp	.+248    	; 0x540 <DISP_Update+0x120>
     448:	87 30       	cpi	r24, 0x07	; 7
     44a:	09 f0       	breq	.+2      	; 0x44e <DISP_Update+0x2e>
     44c:	ce c0       	rjmp	.+412    	; 0x5ea <DISP_Update+0x1ca>
     44e:	9b c0       	rjmp	.+310    	; 0x586 <DISP_Update+0x166>
	case 0:
		if (TRUE == LCD_Update("tmp:", ROW1, COL1)) {
     450:	80 e6       	ldi	r24, 0x60	; 96
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	09 f0       	breq	.+2      	; 0x462 <DISP_Update+0x42>
     460:	c6 c0       	rjmp	.+396    	; 0x5ee <DISP_Update+0x1ce>
     462:	0a c0       	rjmp	.+20     	; 0x478 <DISP_Update+0x58>
			State = 1;
		}
		break;
	case 1:
		if (TRUE == LCD_Update("RM1:", ROW1, COL9)) {
     464:	85 e6       	ldi	r24, 0x65	; 101
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	48 e0       	ldi	r20, 0x08	; 8
     46c:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
     470:	81 30       	cpi	r24, 0x01	; 1
     472:	09 f0       	breq	.+2      	; 0x476 <DISP_Update+0x56>
     474:	bc c0       	rjmp	.+376    	; 0x5ee <DISP_Update+0x1ce>
			State = 2;
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	80 93 0e 01 	sts	0x010E, r24
     47c:	b8 c0       	rjmp	.+368    	; 0x5ee <DISP_Update+0x1ce>
		}
		break;
	case 2:
		if (TRUE == LCD_Update("Light:", ROW2, COL1)) {
     47e:	8a e6       	ldi	r24, 0x6A	; 106
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	40 e0       	ldi	r20, 0x00	; 0
     486:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	09 f0       	breq	.+2      	; 0x490 <DISP_Update+0x70>
     48e:	af c0       	rjmp	.+350    	; 0x5ee <DISP_Update+0x1ce>
			State = 3;
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	f2 cf       	rjmp	.-28     	; 0x478 <DISP_Update+0x58>
		}
		break;
	case 3:
		if (TRUE == LCD_Update("RM2:", ROW2, COL9)) {
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	61 e0       	ldi	r22, 0x01	; 1
     49a:	48 e0       	ldi	r20, 0x08	; 8
     49c:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <DISP_Update+0x86>
     4a4:	a4 c0       	rjmp	.+328    	; 0x5ee <DISP_Update+0x1ce>
			State = 4;
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	e7 cf       	rjmp	.-50     	; 0x478 <DISP_Update+0x58>
		}
		break;
	case 4:
		ECU_RM_Tmp_Data[ECU_ROOM1].SubLight=ECU_RM_Data[ECU_ROOM1].SubLight;
     4aa:	80 91 36 01 	lds	r24, 0x0136
     4ae:	80 93 29 01 	sts	0x0129, r24
		ECU_RM_Tmp_Data[ECU_ROOM1].SubTemp=ECU_RM_Data[ECU_ROOM1].SubTemp;
     4b2:	80 91 37 01 	lds	r24, 0x0137
     4b6:	80 93 2a 01 	sts	0x012A, r24

		ECU_RM_Tmp_Data[ECU_ROOM2].SubLight=ECU_RM_Data[ECU_ROOM2].SubLight;
     4ba:	80 91 3b 01 	lds	r24, 0x013B
     4be:	80 93 2e 01 	sts	0x012E, r24
		ECU_RM_Tmp_Data[ECU_ROOM2].SubTemp=ECU_RM_Data[ECU_ROOM2].SubTemp;
     4c2:	80 91 3c 01 	lds	r24, 0x013C
     4c6:	80 93 2f 01 	sts	0x012F, r24

		ECU_OD_Tmp_Data.Light=ECU_OD_Data.Light;
     4ca:	80 91 31 01 	lds	r24, 0x0131
     4ce:	80 93 24 01 	sts	0x0124, r24
		ECU_OD_Tmp_Data.State=ECU_OD_Data.State;
     4d2:	80 91 32 01 	lds	r24, 0x0132
     4d6:	80 93 25 01 	sts	0x0125, r24

		if(ECU_OD_CNT_OFF==ECU_OD_Tmp_Data.State)
     4da:	88 37       	cpi	r24, 0x78	; 120
     4dc:	29 f0       	breq	.+10     	; 0x4e8 <DISP_Update+0xc8>
		{
			ECU_OD_Tmp_Data.Temp=TMP_Back_Up;

		}else if(ECU_OD_CNT_ON==ECU_OD_Tmp_Data.State)
     4de:	82 38       	cpi	r24, 0x82	; 130
     4e0:	19 f4       	brne	.+6      	; 0x4e8 <DISP_Update+0xc8>
		{
			ECU_OD_Tmp_Data.Temp=ECU_OD_Data.Temp;
     4e2:	80 91 30 01 	lds	r24, 0x0130
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DISP_Update+0xcc>
		}else
		{
			ECU_OD_Tmp_Data.Temp=TMP_Back_Up;
     4e8:	80 91 ab 00 	lds	r24, 0x00AB
     4ec:	80 93 23 01 	sts	0x0123, r24
		}

		IntToStr(StrTemp, ECU_OD_Tmp_Data.Temp);
     4f0:	8f e0       	ldi	r24, 0x0F	; 15
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	60 91 23 01 	lds	r22, 0x0123
     4f8:	0e 94 49 04 	call	0x892	; 0x892 <IntToStr>
		if (TRUE == LCD_Update(StrTemp, ROW1, COL5)) {
     4fc:	8f e0       	ldi	r24, 0x0F	; 15
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	44 e0       	ldi	r20, 0x04	; 4
     504:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	09 f0       	breq	.+2      	; 0x50e <DISP_Update+0xee>
     50c:	70 c0       	rjmp	.+224    	; 0x5ee <DISP_Update+0x1ce>
			State = 5;
     50e:	85 e0       	ldi	r24, 0x05	; 5
     510:	b3 cf       	rjmp	.-154    	; 0x478 <DISP_Update+0x58>
		}
		break;
	case 5:
		if (ECU_OD_LIGHT_MORNING == ECU_OD_Tmp_Data.Light) {
     512:	80 91 24 01 	lds	r24, 0x0124
     516:	8c 38       	cpi	r24, 0x8C	; 140
     518:	19 f4       	brne	.+6      	; 0x520 <DISP_Update+0x100>
			if (TRUE == LCD_Update("M", ROW2, COL7)) {
     51a:	86 e7       	ldi	r24, 0x76	; 118
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	07 c0       	rjmp	.+14     	; 0x52e <DISP_Update+0x10e>
				State = 6;
			}
		} else if (ECU_OD_LIGHT_NIGHT == ECU_OD_Tmp_Data.Light) {
     520:	86 39       	cpi	r24, 0x96	; 150
     522:	19 f4       	brne	.+6      	; 0x52a <DISP_Update+0x10a>
			if (TRUE == LCD_Update("N", ROW2, COL7)) {
     524:	88 e7       	ldi	r24, 0x78	; 120
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	02 c0       	rjmp	.+4      	; 0x52e <DISP_Update+0x10e>
				State = 6;
			}
		} else {
			if (TRUE == LCD_Update(" ", ROW2, COL7)) {
     52a:	8a e7       	ldi	r24, 0x7A	; 122
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	46 e0       	ldi	r20, 0x06	; 6
     532:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	09 f0       	breq	.+2      	; 0x53c <DISP_Update+0x11c>
     53a:	59 c0       	rjmp	.+178    	; 0x5ee <DISP_Update+0x1ce>
				State = 6;
     53c:	86 e0       	ldi	r24, 0x06	; 6
     53e:	9c cf       	rjmp	.-200    	; 0x478 <DISP_Update+0x58>
			}
		}
		break;
	case 6:
		if (ECU_RM_Tmp_Data[ECU_ROOM1].SubLight == ECU_RM_SUB_LIGHT
     540:	80 91 29 01 	lds	r24, 0x0129
     544:	8e 30       	cpi	r24, 0x0E	; 14
     546:	51 f4       	brne	.+20     	; 0x55c <DISP_Update+0x13c>
     548:	80 91 2a 01 	lds	r24, 0x012A
     54c:	8d 30       	cpi	r24, 0x0D	; 13
     54e:	19 f4       	brne	.+6      	; 0x556 <DISP_Update+0x136>
				&& ECU_RM_Tmp_Data[ECU_ROOM1].SubTemp == ECU_RM_SUB_TMP) {
			if (TRUE == LCD_Update("TL", ROW1, COL13)) {
     550:	8c e7       	ldi	r24, 0x7C	; 124
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	09 c0       	rjmp	.+18     	; 0x568 <DISP_Update+0x148>
				State = 7;
			}
		} else if (ECU_RM_Tmp_Data[ECU_ROOM1].SubLight == ECU_RM_SUB_LIGHT) {
			if (TRUE == LCD_Update("L ", ROW1, COL13)) {
     556:	8f e7       	ldi	r24, 0x7F	; 127
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	06 c0       	rjmp	.+12     	; 0x568 <DISP_Update+0x148>
				State = 7;
			}
		} else if (ECU_RM_Tmp_Data[ECU_ROOM1].SubTemp == ECU_RM_SUB_TMP) {
     55c:	80 91 2a 01 	lds	r24, 0x012A
     560:	8d 30       	cpi	r24, 0x0D	; 13
     562:	49 f4       	brne	.+18     	; 0x576 <DISP_Update+0x156>
			if (TRUE == LCD_Update("T ", ROW1, COL13)) {
     564:	82 e8       	ldi	r24, 0x82	; 130
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	4c e0       	ldi	r20, 0x0C	; 12
     56c:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	e9 f5       	brne	.+122    	; 0x5ee <DISP_Update+0x1ce>
     574:	06 c0       	rjmp	.+12     	; 0x582 <DISP_Update+0x162>
				State = 7;
			}
		} else {
			LCD_Update("  ", ROW1, COL13);
     576:	85 e8       	ldi	r24, 0x85	; 133
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	4c e0       	ldi	r20, 0x0C	; 12
     57e:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
			State = 7;
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	79 cf       	rjmp	.-270    	; 0x478 <DISP_Update+0x58>
		}
		break;
	case 7:
		if (ECU_RM_Tmp_Data[ECU_ROOM2].SubLight == ECU_RM_SUB_LIGHT
     586:	80 91 2e 01 	lds	r24, 0x012E
     58a:	8e 30       	cpi	r24, 0x0E	; 14
     58c:	d9 f4       	brne	.+54     	; 0x5c4 <DISP_Update+0x1a4>
     58e:	80 91 2f 01 	lds	r24, 0x012F
     592:	8d 30       	cpi	r24, 0x0D	; 13
     594:	19 f4       	brne	.+6      	; 0x59c <DISP_Update+0x17c>
				&& ECU_RM_Tmp_Data[ECU_ROOM2].SubTemp == ECU_RM_SUB_TMP) {
			if (TRUE == LCD_Update("TL", ROW2, COL13)) {
     596:	8c e7       	ldi	r24, 0x7C	; 124
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	1a c0       	rjmp	.+52     	; 0x5d0 <DISP_Update+0x1b0>
				State = 0;
				//DIO_WRITE_PIN_VALUE(DIO_PINC6,1^DIO_READ_PIN_VALUE(DIO_PINC6));
			}
		} else if (ECU_RM_Tmp_Data[ECU_ROOM2].SubLight == ECU_RM_SUB_LIGHT) {
			if (TRUE == LCD_Update("L ", ROW2, COL13)) {
     59c:	8f e7       	ldi	r24, 0x7F	; 127
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	4c e0       	ldi	r20, 0x0C	; 12
     5a4:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
     5a8:	18 2f       	mov	r17, r24
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	01 f5       	brne	.+64     	; 0x5ee <DISP_Update+0x1ce>
				State = 0;
     5ae:	10 92 0e 01 	sts	0x010E, r1
				DIO_WRITE_PIN_VALUE(DIO_PINC6,1^DIO_READ_PIN_VALUE(DIO_PINC6));
     5b2:	86 e1       	ldi	r24, 0x16	; 22
     5b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_READ_PIN_VALUE>
     5b8:	18 27       	eor	r17, r24
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	61 2f       	mov	r22, r17
     5be:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
     5c2:	15 c0       	rjmp	.+42     	; 0x5ee <DISP_Update+0x1ce>
			}
		} else if (ECU_RM_Tmp_Data[ECU_ROOM2].SubTemp == ECU_RM_SUB_TMP) {
     5c4:	80 91 2f 01 	lds	r24, 0x012F
     5c8:	8d 30       	cpi	r24, 0x0D	; 13
     5ca:	49 f4       	brne	.+18     	; 0x5de <DISP_Update+0x1be>
			if (TRUE == LCD_Update("T ", ROW2, COL13)) {
     5cc:	82 e8       	ldi	r24, 0x82	; 130
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	4c e0       	ldi	r20, 0x0C	; 12
     5d4:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	49 f4       	brne	.+18     	; 0x5ee <DISP_Update+0x1ce>
     5dc:	06 c0       	rjmp	.+12     	; 0x5ea <DISP_Update+0x1ca>
				State = 0;
			//	DIO_WRITE_PIN_VALUE(DIO_PINC6,1^DIO_READ_PIN_VALUE(DIO_PINC6));
			}
		} else {
			LCD_Update("  ", ROW2, COL13);
     5de:	85 e8       	ldi	r24, 0x85	; 133
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	4c e0       	ldi	r20, 0x0C	; 12
     5e6:	0e 94 74 06 	call	0xce8	; 0xce8 <LCD_Update>
			State = 0;
		}
		break;
	default:
		State = 0;
     5ea:	10 92 0e 01 	sts	0x010E, r1
		break;
	}

}
     5ee:	1f 91       	pop	r17
     5f0:	08 95       	ret

000005f2 <ECU_OD_Update_Info>:
#include "ECU_OD.h"
#include "SPI.h"
ECU_OD_DATA_t ECU_OD_Data;
ECU_OD_MODE_t ECU_OD_Mode = ECU_OD_MODE_INFO_ID;
void ECU_OD_Update_Info(void){
	if (SS_ENABLE == SPI_Slave.Select[SS_OD]) {
     5f2:	80 91 1a 01 	lds	r24, 0x011A
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	09 f0       	breq	.+2      	; 0x5fc <ECU_OD_Update_Info+0xa>
     5fa:	41 c0       	rjmp	.+130    	; 0x67e <ECU_OD_Update_Info+0x8c>
		switch (ECU_OD_Mode) {
     5fc:	80 91 a8 00 	lds	r24, 0x00A8
     600:	8a 35       	cpi	r24, 0x5A	; 90
     602:	d1 f0       	breq	.+52     	; 0x638 <ECU_OD_Update_Info+0x46>
     604:	8b 35       	cpi	r24, 0x5B	; 91
     606:	18 f4       	brcc	.+6      	; 0x60e <ECU_OD_Update_Info+0x1c>
     608:	80 35       	cpi	r24, 0x50	; 80
     60a:	c9 f5       	brne	.+114    	; 0x67e <ECU_OD_Update_Info+0x8c>
     60c:	05 c0       	rjmp	.+10     	; 0x618 <ECU_OD_Update_Info+0x26>
     60e:	84 36       	cpi	r24, 0x64	; 100
     610:	39 f1       	breq	.+78     	; 0x660 <ECU_OD_Update_Info+0x6e>
     612:	8e 36       	cpi	r24, 0x6E	; 110
     614:	a1 f5       	brne	.+104    	; 0x67e <ECU_OD_Update_Info+0x8c>
     616:	2c c0       	rjmp	.+88     	; 0x670 <ECU_OD_Update_Info+0x7e>
		case ECU_OD_MODE_INFO_ID:
			if (ECU_OD_INFO_ID_CNT == SPI_Curr_Reading) {
     618:	80 91 3e 01 	lds	r24, 0x013E
     61c:	82 33       	cpi	r24, 0x32	; 50
     61e:	11 f4       	brne	.+4      	; 0x624 <ECU_OD_Update_Info+0x32>
				ECU_OD_Mode = ECU_OD_MODE_INFO_CNT;
     620:	8a e5       	ldi	r24, 0x5A	; 90
     622:	07 c0       	rjmp	.+14     	; 0x632 <ECU_OD_Update_Info+0x40>
			} else if (ECU_OD_INFO_ID_TMP == SPI_Curr_Reading) {
     624:	8c 33       	cpi	r24, 0x3C	; 60
     626:	11 f4       	brne	.+4      	; 0x62c <ECU_OD_Update_Info+0x3a>
				ECU_OD_Mode = ECU_OD_MODE_INFO_TMP;
     628:	84 e6       	ldi	r24, 0x64	; 100
     62a:	03 c0       	rjmp	.+6      	; 0x632 <ECU_OD_Update_Info+0x40>
			} else if (ECU_OD_INFO_ID_LIGHT == SPI_Curr_Reading) {
     62c:	86 34       	cpi	r24, 0x46	; 70
     62e:	39 f5       	brne	.+78     	; 0x67e <ECU_OD_Update_Info+0x8c>
				ECU_OD_Mode = ECU_OD_MODE_INFO_LIGHT;
     630:	8e e6       	ldi	r24, 0x6E	; 110
     632:	80 93 a8 00 	sts	0x00A8, r24
     636:	08 95       	ret
			} else {

			}
			break;
		case ECU_OD_MODE_INFO_CNT:
			ECU_OD_Mode = ECU_OD_MODE_INFO_ID;
     638:	80 e5       	ldi	r24, 0x50	; 80
     63a:	80 93 a8 00 	sts	0x00A8, r24
			ECU_OD_Data.State = SPI_Curr_Reading;
     63e:	80 91 3e 01 	lds	r24, 0x013E
     642:	80 93 32 01 	sts	0x0132, r24
			/*USSUB ROOMS*/
			if(ECU_OD_CNT_OFF==ECU_OD_Data.State)
     646:	88 37       	cpi	r24, 0x78	; 120
     648:	d1 f4       	brne	.+52     	; 0x67e <ECU_OD_Update_Info+0x8c>
			{
				ECU_RM_Data[ECU_ROOM1].SubLight = ECU_RM_UNSUB_LIGHT;
     64a:	90 e1       	ldi	r25, 0x10	; 16
     64c:	90 93 36 01 	sts	0x0136, r25
				ECU_RM_Data[ECU_ROOM1].SubTemp = ECU_RM_UNSUB_TMP;
     650:	8f e0       	ldi	r24, 0x0F	; 15
     652:	80 93 37 01 	sts	0x0137, r24

				ECU_RM_Data[ECU_ROOM2].SubLight = ECU_RM_UNSUB_LIGHT;
     656:	90 93 3b 01 	sts	0x013B, r25
				ECU_RM_Data[ECU_ROOM2].SubTemp = ECU_RM_UNSUB_TMP;
     65a:	80 93 3c 01 	sts	0x013C, r24
     65e:	08 95       	ret
			}
			break;
		case ECU_OD_MODE_INFO_TMP:
			ECU_OD_Mode = ECU_OD_MODE_INFO_ID;
     660:	80 e5       	ldi	r24, 0x50	; 80
     662:	80 93 a8 00 	sts	0x00A8, r24
			ECU_OD_Data.Temp = SPI_Curr_Reading;
     666:	80 91 3e 01 	lds	r24, 0x013E
     66a:	80 93 30 01 	sts	0x0130, r24
     66e:	08 95       	ret
			break;
		case ECU_OD_MODE_INFO_LIGHT:
			ECU_OD_Mode = ECU_OD_MODE_INFO_ID;
     670:	80 e5       	ldi	r24, 0x50	; 80
     672:	80 93 a8 00 	sts	0x00A8, r24
			ECU_OD_Data.Light = SPI_Curr_Reading;
     676:	80 91 3e 01 	lds	r24, 0x013E
     67a:	80 93 31 01 	sts	0x0131, r24
     67e:	08 95       	ret

00000680 <ECU_RM_Update>:

	}
}
static void ECU_RM_Update(ECU_RM_t ROOM){

	switch (SPI_Curr_Reading) {
     680:	20 91 3e 01 	lds	r18, 0x013E
     684:	2d 30       	cpi	r18, 0x0D	; 13
     686:	c9 f1       	breq	.+114    	; 0x6fa <ECU_RM_Update+0x7a>
     688:	2e 30       	cpi	r18, 0x0E	; 14
     68a:	30 f4       	brcc	.+12     	; 0x698 <ECU_RM_Update+0x18>
     68c:	2b 30       	cpi	r18, 0x0B	; 11
     68e:	69 f0       	breq	.+26     	; 0x6aa <ECU_RM_Update+0x2a>
     690:	2c 30       	cpi	r18, 0x0C	; 12
     692:	09 f0       	breq	.+2      	; 0x696 <ECU_RM_Update+0x16>
     694:	55 c0       	rjmp	.+170    	; 0x740 <ECU_RM_Update+0xc0>
     696:	18 c0       	rjmp	.+48     	; 0x6c8 <ECU_RM_Update+0x48>
     698:	2f 30       	cpi	r18, 0x0F	; 15
     69a:	09 f4       	brne	.+2      	; 0x69e <ECU_RM_Update+0x1e>
     69c:	46 c0       	rjmp	.+140    	; 0x72a <ECU_RM_Update+0xaa>
     69e:	2f 30       	cpi	r18, 0x0F	; 15
     6a0:	f8 f0       	brcs	.+62     	; 0x6e0 <ECU_RM_Update+0x60>
     6a2:	20 31       	cpi	r18, 0x10	; 16
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <ECU_RM_Update+0x28>
     6a6:	4c c0       	rjmp	.+152    	; 0x740 <ECU_RM_Update+0xc0>
     6a8:	34 c0       	rjmp	.+104    	; 0x712 <ECU_RM_Update+0x92>
	case ECU_RM_OFF:
		ECU_RM_Data[ROOM].SubLight = ECU_RM_UNSUB_LIGHT;
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fc 01       	movw	r30, r24
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	e8 0f       	add	r30, r24
     6b8:	f9 1f       	adc	r31, r25
     6ba:	ed 5c       	subi	r30, 0xCD	; 205
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	80 e1       	ldi	r24, 0x10	; 16
     6c0:	83 83       	std	Z+3, r24	; 0x03
		ECU_RM_Data[ROOM].SubTemp = ECU_RM_UNSUB_TMP;
     6c2:	8f e0       	ldi	r24, 0x0F	; 15
     6c4:	84 83       	std	Z+4, r24	; 0x04
     6c6:	0a c0       	rjmp	.+20     	; 0x6dc <ECU_RM_Update+0x5c>
		ECU_RM_Data[ROOM].State = ECU_RM_OFF;
		break;
	case ECU_RM_ON:
		ECU_RM_Data[ROOM].State = ECU_RM_ON;
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	fc 01       	movw	r30, r24
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	e8 0f       	add	r30, r24
     6d6:	f9 1f       	adc	r31, r25
     6d8:	ed 5c       	subi	r30, 0xCD	; 205
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	22 83       	std	Z+2, r18	; 0x02
     6de:	08 95       	ret
		break;
	case ECU_RM_SUB_LIGHT:
		ECU_RM_Data[ROOM].SubLight = ECU_RM_SUB_LIGHT;
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	fc 01       	movw	r30, r24
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	e8 0f       	add	r30, r24
     6ee:	f9 1f       	adc	r31, r25
     6f0:	ed 5c       	subi	r30, 0xCD	; 205
     6f2:	fe 4f       	sbci	r31, 0xFE	; 254
     6f4:	8e e0       	ldi	r24, 0x0E	; 14
     6f6:	83 83       	std	Z+3, r24	; 0x03
     6f8:	08 95       	ret
		break;
	case ECU_RM_SUB_TMP:
		ECU_RM_Data[ROOM].SubTemp = ECU_RM_SUB_TMP;
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	fc 01       	movw	r30, r24
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	e8 0f       	add	r30, r24
     708:	f9 1f       	adc	r31, r25
     70a:	ed 5c       	subi	r30, 0xCD	; 205
     70c:	fe 4f       	sbci	r31, 0xFE	; 254
     70e:	24 83       	std	Z+4, r18	; 0x04
     710:	08 95       	ret
		break;
	case ECU_RM_UNSUB_LIGHT:
		ECU_RM_Data[ROOM].SubLight = ECU_RM_UNSUB_LIGHT;
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	fc 01       	movw	r30, r24
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	e8 0f       	add	r30, r24
     720:	f9 1f       	adc	r31, r25
     722:	ed 5c       	subi	r30, 0xCD	; 205
     724:	fe 4f       	sbci	r31, 0xFE	; 254
     726:	23 83       	std	Z+3, r18	; 0x03
     728:	08 95       	ret
		break;
	case ECU_RM_UNSUB_TMP:
		ECU_RM_Data[ROOM].SubTemp = ECU_RM_UNSUB_TMP;
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	fc 01       	movw	r30, r24
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	e8 0f       	add	r30, r24
     738:	f9 1f       	adc	r31, r25
     73a:	ed 5c       	subi	r30, 0xCD	; 205
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	24 83       	std	Z+4, r18	; 0x04
     740:	08 95       	ret

00000742 <ECU_RM_Update_Info>:
#include "SPI.h"
ECU_RM_DATA_t ECU_RM_Data[MAX_ECU_RM];
ECU_RM_INFO_t ECU_RM_Info = ECU_RM_OFF;
static void ECU_RM_Update(ECU_RM_t ROOM);
void ECU_RM_Update_Info(void){
	if (SS_ENABLE == SPI_Slave.Select[SS_RM1]) {
     742:	80 91 1b 01 	lds	r24, 0x011B
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	21 f4       	brne	.+8      	; 0x752 <ECU_RM_Update_Info+0x10>
		/*update reading&writing*/
		ECU_RM_Update(ECU_ROOM1);
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0e 94 40 03 	call	0x680	; 0x680 <ECU_RM_Update>
     750:	08 95       	ret
	} else if (SS_ENABLE == SPI_Slave.Select[SS_RM2]) {
     752:	80 91 1c 01 	lds	r24, 0x011C
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	11 f4       	brne	.+4      	; 0x75e <ECU_RM_Update_Info+0x1c>
		ECU_RM_Update(ECU_ROOM2);
     75a:	0e 94 40 03 	call	0x680	; 0x680 <ECU_RM_Update>
     75e:	08 95       	ret

00000760 <KEYPAD_Init>:
	KEYPAD_COL_t KYPAD_Col[KEYPAD_MAX_COLS] = {KEYPAD_COL1, KEYPAD_COL2, KEYPAD_COL3};
#if KYPAD_SIZE == FOUR_X_FOUR
	KYPAD_Col[3] = KEYPAD_COL4;
#endif
	for(Idx = 0; Idx < KEYPAD_MAX_COLS; Idx++){
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Idx], DIO_PIN_STATE_HIGH);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
	}
}
     780:	08 95       	ret

00000782 <KEYPAD_Read>:
/****************************************************************************/
UINT8_t KEYPAD_Read(void){
     782:	cf 92       	push	r12
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	df 93       	push	r29
     790:	cf 93       	push	r28
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	64 97       	sbiw	r28, 0x14	; 20
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
	UINT8_t Col_Idx, Row_Idx, Key_Pressed = NO_KEY;
	KEYPAD_COL_t KYPAD_Col[KEYPAD_MAX_COLS] = {KEYPAD_COL1, KEYPAD_COL2, KEYPAD_COL3};
     7a2:	19 82       	std	Y+1, r1	; 0x01
     7a4:	1a 82       	std	Y+2, r1	; 0x02
     7a6:	1b 82       	std	Y+3, r1	; 0x03
     7a8:	1c 82       	std	Y+4, r1	; 0x04
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	8a 83       	std	Y+2, r24	; 0x02
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	8b 83       	std	Y+3, r24	; 0x03
	KEYPAD_ROW_t KEYPAD_Row[KEYPAD_MAX_ROWS] = {KEYPAD_ROW1, KEYPAD_ROW2, KEYPAD_ROW3};
	UINT8_t Keypad[KEYPAD_MAX_ROWS][KEYPAD_MAX_COLS] = KEYPAD_VALUES;
     7b2:	de 01       	movw	r26, r28
     7b4:	15 96       	adiw	r26, 0x05	; 5
     7b6:	e7 ed       	ldi	r30, 0xD7	; 215
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 e1       	ldi	r24, 0x10	; 16
     7bc:	01 90       	ld	r0, Z+
     7be:	0d 92       	st	X+, r0
     7c0:	81 50       	subi	r24, 0x01	; 1
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <KEYPAD_Read+0x3a>
#if KYPAD_SIZE == FOUR_X_FOUR
	KYPAD_Col[3] = KEYPAD_COL4;
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	8c 83       	std	Y+4, r24	; 0x04
	KEYPAD_Row[3] = KEYPAD_ROW4;
     7c8:	00 e0       	ldi	r16, 0x00	; 0
     7ca:	10 e0       	ldi	r17, 0x00	; 0
#endif
	for(Col_Idx = 0; Col_Idx < KEYPAD_MAX_COLS; Col_Idx++){
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_LOW);
     7cc:	6e 01       	movw	r12, r28
     7ce:	08 94       	sec
     7d0:	c1 1c       	adc	r12, r1
     7d2:	d1 1c       	adc	r13, r1
     7d4:	f6 01       	movw	r30, r12
     7d6:	e0 0f       	add	r30, r16
     7d8:	f1 1f       	adc	r31, r17
     7da:	e0 80       	ld	r14, Z
     7dc:	8e 2d       	mov	r24, r14
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		for(Row_Idx = 0; Row_Idx < KEYPAD_MAX_ROWS; Row_Idx++){
			if(DIO_PIN_STATE_LOW == DIO_READ_PIN_VALUE(KEYPAD_Row[Row_Idx])){
     7e4:	64 e0       	ldi	r22, 0x04	; 4
     7e6:	f6 2e       	mov	r15, r22
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_READ_PIN_VALUE>
     7ee:	88 23       	and	r24, r24
     7f0:	19 f4       	brne	.+6      	; 0x7f8 <KEYPAD_Read+0x76>
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	1d c0       	rjmp	.+58     	; 0x832 <KEYPAD_Read+0xb0>
     7f8:	55 e0       	ldi	r21, 0x05	; 5
     7fa:	f5 2e       	mov	r15, r21
     7fc:	85 e0       	ldi	r24, 0x05	; 5
     7fe:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_READ_PIN_VALUE>
     802:	88 23       	and	r24, r24
     804:	19 f4       	brne	.+6      	; 0x80c <KEYPAD_Read+0x8a>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	13 c0       	rjmp	.+38     	; 0x832 <KEYPAD_Read+0xb0>
     80c:	46 e0       	ldi	r20, 0x06	; 6
     80e:	f4 2e       	mov	r15, r20
     810:	86 e0       	ldi	r24, 0x06	; 6
     812:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_READ_PIN_VALUE>
     816:	88 23       	and	r24, r24
     818:	19 f4       	brne	.+6      	; 0x820 <KEYPAD_Read+0x9e>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	09 c0       	rjmp	.+18     	; 0x832 <KEYPAD_Read+0xb0>
     820:	87 e0       	ldi	r24, 0x07	; 7
     822:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_READ_PIN_VALUE>
     826:	88 23       	and	r24, r24
     828:	c9 f4       	brne	.+50     	; 0x85c <KEYPAD_Read+0xda>
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	37 e0       	ldi	r19, 0x07	; 7
     830:	f3 2e       	mov	r15, r19
				Key_Pressed = Keypad[Row_Idx][Col_Idx];
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	fe 01       	movw	r30, r28
     83c:	31 96       	adiw	r30, 0x01	; 1
     83e:	e8 0f       	add	r30, r24
     840:	f9 1f       	adc	r31, r25
     842:	e0 0f       	add	r30, r16
     844:	f1 1f       	adc	r31, r17
     846:	14 81       	ldd	r17, Z+4	; 0x04
				while(DIO_PIN_STATE_LOW == DIO_READ_PIN_VALUE(KEYPAD_Row[Row_Idx]));
     848:	8f 2d       	mov	r24, r15
     84a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_READ_PIN_VALUE>
     84e:	88 23       	and	r24, r24
     850:	d9 f3       	breq	.-10     	; 0x848 <KEYPAD_Read+0xc6>
				DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_HIGH);
     852:	8e 2d       	mov	r24, r14
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
     85a:	0b c0       	rjmp	.+22     	; 0x872 <__stack+0x13>
				return Key_Pressed;
			}
		}
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_HIGH);
     85c:	8e 2d       	mov	r24, r14
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
     864:	0f 5f       	subi	r16, 0xFF	; 255
     866:	1f 4f       	sbci	r17, 0xFF	; 255
	UINT8_t Keypad[KEYPAD_MAX_ROWS][KEYPAD_MAX_COLS] = KEYPAD_VALUES;
#if KYPAD_SIZE == FOUR_X_FOUR
	KYPAD_Col[3] = KEYPAD_COL4;
	KEYPAD_Row[3] = KEYPAD_ROW4;
#endif
	for(Col_Idx = 0; Col_Idx < KEYPAD_MAX_COLS; Col_Idx++){
     868:	04 30       	cpi	r16, 0x04	; 4
     86a:	11 05       	cpc	r17, r1
     86c:	09 f0       	breq	.+2      	; 0x870 <__stack+0x11>
     86e:	b2 cf       	rjmp	.-156    	; 0x7d4 <KEYPAD_Read+0x52>
     870:	16 e1       	ldi	r17, 0x16	; 22
			}
		}
		DIO_WRITE_PIN_VALUE(KYPAD_Col[Col_Idx], DIO_PIN_STATE_HIGH);
	}
	return Key_Pressed;
}
     872:	81 2f       	mov	r24, r17
     874:	64 96       	adiw	r28, 0x14	; 20
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	cf 91       	pop	r28
     882:	df 91       	pop	r29
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	08 95       	ret

00000892 <IntToStr>:
		break;

	}
	return IsFinished;
}
void IntToStr(char*Str,UINT8_t Num){
     892:	fc 01       	movw	r30, r24
     894:	26 2f       	mov	r18, r22
	if (Num / 10) {
     896:	6a 30       	cpi	r22, 0x0A	; 10
     898:	60 f0       	brcs	.+24     	; 0x8b2 <IntToStr+0x20>
		Str[0] = (Num / 10) + '0';
     89a:	86 2f       	mov	r24, r22
     89c:	6a e0       	ldi	r22, 0x0A	; 10
     89e:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodqi4>
     8a2:	80 5d       	subi	r24, 0xD0	; 208
     8a4:	80 83       	st	Z, r24
		Str[1] = (Num % 10) + '0';
     8a6:	82 2f       	mov	r24, r18
     8a8:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodqi4>
     8ac:	90 5d       	subi	r25, 0xD0	; 208
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	04 c0       	rjmp	.+8      	; 0x8ba <IntToStr+0x28>
		Str[2] = '\0';
	} else {
		Str[0] = Num + '0';
     8b2:	20 5d       	subi	r18, 0xD0	; 208
     8b4:	20 83       	st	Z, r18
		Str[1] = ' ';
     8b6:	80 e2       	ldi	r24, 0x20	; 32
     8b8:	81 83       	std	Z+1, r24	; 0x01
		Str[2] = '\0';
     8ba:	12 82       	std	Z+2, r1	; 0x02
     8bc:	08 95       	ret

000008be <LCD_Write_Char>:
		IsFinished=LCD_Send_Command(Address_Counter);
	}
	return IsFinished;
}
/*************************************************************************/
BOOL_t LCD_Write_Char(const UINT8_t Character) {
     8be:	1f 93       	push	r17
     8c0:	18 2f       	mov	r17, r24
	static UINT8_t Cnt=0;
	BOOL_t IsFinished=FALSE;
	++Cnt;
     8c2:	80 91 15 01 	lds	r24, 0x0115
     8c6:	8f 5f       	subi	r24, 0xFF	; 255
     8c8:	80 93 15 01 	sts	0x0115, r24
	if(1==Cnt){
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	21 f5       	brne	.+72     	; 0x918 <LCD_Write_Char+0x5a>
		// Write operation
		DIO_WRITE_PIN_VALUE(RW_PIN_NUMBER, DIO_PIN_STATE_LOW);     //  R/W
     8d0:	8d e1       	ldi	r24, 0x1D	; 29
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		// Data Mode
		DIO_WRITE_PIN_VALUE(RS_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //   RS
     8d8:	8e e1       	ldi	r24, 0x1E	; 30
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     8e0:	8c e1       	ldi	r24, 0x1C	; 28
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		// SEND MSB
		DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(Character, 4));   //  D4
     8e8:	61 2f       	mov	r22, r17
     8ea:	62 95       	swap	r22
     8ec:	61 70       	andi	r22, 0x01	; 1
     8ee:	88 e1       	ldi	r24, 0x18	; 24
     8f0:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(Character, 5));   //  D5
     8f4:	61 2f       	mov	r22, r17
     8f6:	62 95       	swap	r22
     8f8:	66 95       	lsr	r22
     8fa:	61 70       	andi	r22, 0x01	; 1
     8fc:	89 e1       	ldi	r24, 0x19	; 25
     8fe:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(Character, 6));   //  D6
     902:	12 95       	swap	r17
     904:	16 95       	lsr	r17
     906:	16 95       	lsr	r17
     908:	13 70       	andi	r17, 0x03	; 3
     90a:	61 2f       	mov	r22, r17
     90c:	61 70       	andi	r22, 0x01	; 1
     90e:	8a e1       	ldi	r24, 0x1A	; 26
     910:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(Character, 7));   //  D7
     914:	16 95       	lsr	r17
     916:	1a c0       	rjmp	.+52     	; 0x94c <LCD_Write_Char+0x8e>
		/* Latch data */
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
	}else if (3==Cnt) {
     918:	83 30       	cpi	r24, 0x03	; 3
     91a:	11 f5       	brne	.+68     	; 0x960 <LCD_Write_Char+0xa2>
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     91c:	8c e1       	ldi	r24, 0x1C	; 28
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		// SEN LSB
		DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(Character, 0));   //  D4
     924:	61 2f       	mov	r22, r17
     926:	61 70       	andi	r22, 0x01	; 1
     928:	88 e1       	ldi	r24, 0x18	; 24
     92a:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(Character, 1));   //  D5
     92e:	61 2f       	mov	r22, r17
     930:	66 95       	lsr	r22
     932:	61 70       	andi	r22, 0x01	; 1
     934:	89 e1       	ldi	r24, 0x19	; 25
     936:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(Character, 2));   //  D6
     93a:	16 95       	lsr	r17
     93c:	16 95       	lsr	r17
     93e:	61 2f       	mov	r22, r17
     940:	61 70       	andi	r22, 0x01	; 1
     942:	8a e1       	ldi	r24, 0x1A	; 26
     944:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(Character, 3));   //  D7
     948:	16 95       	lsr	r17
     94a:	11 70       	andi	r17, 0x01	; 1
     94c:	8b e1       	ldi	r24, 0x1B	; 27
     94e:	61 2f       	mov	r22, r17
     950:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
     954:	8c e1       	ldi	r24, 0x1C	; 28
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0a c0       	rjmp	.+20     	; 0x974 <LCD_Write_Char+0xb6>
	//_delay_ms(10);


	//_delay_ms(10);
	/* Latch data */
	else if (5==Cnt) {
     960:	85 30       	cpi	r24, 0x05	; 5
     962:	19 f4       	brne	.+6      	; 0x96a <LCD_Write_Char+0xac>
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     964:	8c e1       	ldi	r24, 0x1C	; 28
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	f7 cf       	rjmp	.-18     	; 0x958 <LCD_Write_Char+0x9a>
	}else if (8==Cnt) {
     96a:	88 30       	cpi	r24, 0x08	; 8
     96c:	b9 f7       	brne	.-18     	; 0x95c <LCD_Write_Char+0x9e>
		Cnt=0;
     96e:	10 92 15 01 	sts	0x0115, r1
     972:	81 e0       	ldi	r24, 0x01	; 1
		IsFinished=TRUE;
	}
	return IsFinished;
}
     974:	1f 91       	pop	r17
     976:	08 95       	ret

00000978 <LCD_Disp_Number>:
/*************************************************************************/
void LCD_Disp_Number(UINT16_t Number) {
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	fc 01       	movw	r30, r24
     982:	ec 01       	movw	r28, r24
     984:	40 e0       	ldi	r20, 0x00	; 0
}
/*************************************************************************/
static UINT16_t Get_Number_Length(UINT16_t Number) {
	UINT8_t Length = 0;
	do {
		Length++;
     986:	4f 5f       	subi	r20, 0xFF	; 255
	} while (Number /= 10);
     988:	ce 01       	movw	r24, r28
     98a:	6a e0       	ldi	r22, 0x0A	; 10
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	0e 94 20 09 	call	0x1240	; 0x1240 <__udivmodhi4>
     992:	eb 01       	movw	r28, r22
     994:	61 15       	cp	r22, r1
     996:	71 05       	cpc	r23, r1
     998:	b1 f7       	brne	.-20     	; 0x986 <LCD_Disp_Number+0xe>
}
/*************************************************************************/
static UINT16_t Reverse_Number(UINT16_t Number) {
	UINT16_t Reversed_Number = 0;
	do {
		Reversed_Number = Reversed_Number * 10 + Number % 10;
     99a:	ce 01       	movw	r24, r28
     99c:	33 e0       	ldi	r19, 0x03	; 3
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	3a 95       	dec	r19
     9a4:	e1 f7       	brne	.-8      	; 0x99e <LCD_Disp_Number+0x26>
     9a6:	cc 0f       	add	r28, r28
     9a8:	dd 1f       	adc	r29, r29
     9aa:	c8 0f       	add	r28, r24
     9ac:	d9 1f       	adc	r29, r25
     9ae:	cf 01       	movw	r24, r30
     9b0:	6a e0       	ldi	r22, 0x0A	; 10
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	0e 94 20 09 	call	0x1240	; 0x1240 <__udivmodhi4>
     9b8:	c8 0f       	add	r28, r24
     9ba:	d9 1f       	adc	r29, r25
	} while (Number /= 10);   //ex : 101
     9bc:	cf 01       	movw	r24, r30
     9be:	6a e0       	ldi	r22, 0x0A	; 10
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	0e 94 20 09 	call	0x1240	; 0x1240 <__udivmodhi4>
     9c6:	fb 01       	movw	r30, r22
     9c8:	61 15       	cp	r22, r1
     9ca:	71 05       	cpc	r23, r1
     9cc:	31 f7       	brne	.-52     	; 0x99a <LCD_Disp_Number+0x22>
static UINT16_t Get_Number_Length(UINT16_t Number) {
	UINT8_t Length = 0;
	do {
		Length++;
	} while (Number /= 10);
	return Length;
     9ce:	04 2f       	mov	r16, r20
     9d0:	10 e0       	ldi	r17, 0x00	; 0
void LCD_Disp_Number(UINT16_t Number) {
	UINT16_t Length = 0;
	Length = Get_Number_Length(Number);
	Number = Reverse_Number(Number);
	do {
		Length--;
     9d2:	01 50       	subi	r16, 0x01	; 1
     9d4:	10 40       	sbci	r17, 0x00	; 0
		LCD_Write_Char((UINT8_t) (Number % 10) + '0'); //ex : 101
     9d6:	ce 01       	movw	r24, r28
     9d8:	6a e0       	ldi	r22, 0x0A	; 10
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	0e 94 20 09 	call	0x1240	; 0x1240 <__udivmodhi4>
     9e0:	80 5d       	subi	r24, 0xD0	; 208
     9e2:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_Write_Char>
	} while (Number /= 10);
     9e6:	ce 01       	movw	r24, r28
     9e8:	6a e0       	ldi	r22, 0x0A	; 10
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	0e 94 20 09 	call	0x1240	; 0x1240 <__udivmodhi4>
     9f0:	eb 01       	movw	r28, r22
     9f2:	61 15       	cp	r22, r1
     9f4:	71 05       	cpc	r23, r1
     9f6:	69 f7       	brne	.-38     	; 0x9d2 <LCD_Disp_Number+0x5a>
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <LCD_Disp_Number+0x8c>
	while (Length) {
		LCD_Write_Char('0');
     9fa:	80 e3       	ldi	r24, 0x30	; 48
     9fc:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_Write_Char>
		Length--;
     a00:	01 50       	subi	r16, 0x01	; 1
     a02:	10 40       	sbci	r17, 0x00	; 0
	Number = Reverse_Number(Number);
	do {
		Length--;
		LCD_Write_Char((UINT8_t) (Number % 10) + '0'); //ex : 101
	} while (Number /= 10);
	while (Length) {
     a04:	01 15       	cp	r16, r1
     a06:	11 05       	cpc	r17, r1
     a08:	c1 f7       	brne	.-16     	; 0x9fa <LCD_Disp_Number+0x82>
		LCD_Write_Char('0');
		Length--;
	}
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <LCD_Disp_Str>:
		IsFinished=TRUE;
	}
	return IsFinished;
}
/*************************************************************************/
void LCD_Disp_Str(const UINT8_t* Data) {
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <LCD_Disp_Str+0xe>

	while (*Data != '\0') {
		LCD_Write_Char(*Data++);
     a1c:	21 96       	adiw	r28, 0x01	; 1
     a1e:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_Write_Char>
	return IsFinished;
}
/*************************************************************************/
void LCD_Disp_Str(const UINT8_t* Data) {

	while (*Data != '\0') {
     a22:	88 81       	ld	r24, Y
     a24:	88 23       	and	r24, r24
     a26:	d1 f7       	brne	.-12     	; 0xa1c <LCD_Disp_Str+0x8>
		LCD_Write_Char(*Data++);
	}

}
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	08 95       	ret

00000a2e <LCD_Send_Command>:
	}

	return IsFinished;
}
/*************************************************************************/
BOOL_t LCD_Send_Command(const UINT8_t CMD) {
     a2e:	1f 93       	push	r17
     a30:	18 2f       	mov	r17, r24
	static UINT8_t Cnt=0;
	BOOL_t IsFinished=FALSE;
	++Cnt;
     a32:	80 91 17 01 	lds	r24, 0x0117
     a36:	8f 5f       	subi	r24, 0xFF	; 255
     a38:	80 93 17 01 	sts	0x0117, r24
	if(1==Cnt){
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	21 f5       	brne	.+72     	; 0xa88 <LCD_Send_Command+0x5a>
		// Write operation
		DIO_WRITE_PIN_VALUE(RW_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  R/W
     a40:	8d e1       	ldi	r24, 0x1D	; 29
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		// Command Mode
		DIO_WRITE_PIN_VALUE(RS_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  RS
     a48:	8e e1       	ldi	r24, 0x1E	; 30
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

		// SEND MSB
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     a50:	8c e1       	ldi	r24, 0x1C	; 28
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

		DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(CMD, 4));   //  D4
     a58:	61 2f       	mov	r22, r17
     a5a:	62 95       	swap	r22
     a5c:	61 70       	andi	r22, 0x01	; 1
     a5e:	88 e1       	ldi	r24, 0x18	; 24
     a60:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(CMD, 5));   //  D5
     a64:	61 2f       	mov	r22, r17
     a66:	62 95       	swap	r22
     a68:	66 95       	lsr	r22
     a6a:	61 70       	andi	r22, 0x01	; 1
     a6c:	89 e1       	ldi	r24, 0x19	; 25
     a6e:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(CMD, 6));   //  D6
     a72:	12 95       	swap	r17
     a74:	16 95       	lsr	r17
     a76:	16 95       	lsr	r17
     a78:	13 70       	andi	r17, 0x03	; 3
     a7a:	61 2f       	mov	r22, r17
     a7c:	61 70       	andi	r22, 0x01	; 1
     a7e:	8a e1       	ldi	r24, 0x1A	; 26
     a80:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(CMD, 7));   //  D7
     a84:	16 95       	lsr	r17
     a86:	1e c0       	rjmp	.+60     	; 0xac4 <LCD_Send_Command+0x96>
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
	}


	//_delay_ms(10);
	else if (3==Cnt) {
     a88:	83 30       	cpi	r24, 0x03	; 3
     a8a:	29 f5       	brne	.+74     	; 0xad6 <LCD_Send_Command+0xa8>
		/* Latch data */
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     a8c:	8c e1       	ldi	r24, 0x1C	; 28
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

		if (Configuration_Process == ENDED) {
     a94:	80 91 16 01 	lds	r24, 0x0116
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	39 f5       	brne	.+78     	; 0xaea <LCD_Send_Command+0xbc>
			// SEND LSB
			DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, GET_BIT(CMD, 0));   //  D4
     a9c:	61 2f       	mov	r22, r17
     a9e:	61 70       	andi	r22, 0x01	; 1
     aa0:	88 e1       	ldi	r24, 0x18	; 24
     aa2:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
			DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, GET_BIT(CMD, 1));   //  D5
     aa6:	61 2f       	mov	r22, r17
     aa8:	66 95       	lsr	r22
     aaa:	61 70       	andi	r22, 0x01	; 1
     aac:	89 e1       	ldi	r24, 0x19	; 25
     aae:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
			DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, GET_BIT(CMD, 2));   //  D6
     ab2:	16 95       	lsr	r17
     ab4:	16 95       	lsr	r17
     ab6:	61 2f       	mov	r22, r17
     ab8:	61 70       	andi	r22, 0x01	; 1
     aba:	8a e1       	ldi	r24, 0x1A	; 26
     abc:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
			DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, GET_BIT(CMD, 3));   //  D7
     ac0:	16 95       	lsr	r17
     ac2:	11 70       	andi	r17, 0x01	; 1
     ac4:	8b e1       	ldi	r24, 0x1B	; 27
     ac6:	61 2f       	mov	r22, r17
     ac8:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

			DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  E
     acc:	8c e1       	ldi	r24, 0x1C	; 28
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
     ad4:	0a c0       	rjmp	.+20     	; 0xaea <LCD_Send_Command+0xbc>
		}
	}

	// for latching
	//_delay_ms(10);
	else if (5 == Cnt) {
     ad6:	85 30       	cpi	r24, 0x05	; 5
     ad8:	41 f4       	brne	.+16     	; 0xaea <LCD_Send_Command+0xbc>
		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH);   //  E
     ada:	8c e1       	ldi	r24, 0x1C	; 28
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		Cnt=0;
     ae2:	10 92 17 01 	sts	0x0117, r1
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <LCD_Send_Command+0xbe>
     aea:	80 e0       	ldi	r24, 0x00	; 0
		IsFinished=TRUE;
	}
	return IsFinished;
}
     aec:	1f 91       	pop	r17
     aee:	08 95       	ret

00000af0 <LCD_Write_CGRAM>:
		break;
	}
	return IsFinished;
}
/*************************************************************************/
void LCD_Write_CGRAM(const UINT8_t* Data, CGRAM_ROW_ID_t ROW_ID){
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	8c 01       	movw	r16, r24
	UINT8_t Address, Idx;
	if(ROW_ID < CGRAM_MAX_ROWS){
     afa:	68 30       	cpi	r22, 0x08	; 8
     afc:	98 f4       	brcc	.+38     	; 0xb24 <LCD_Write_CGRAM+0x34>
		Address = (ROW_ID * 8) | (1 << 6);
		LCD_Send_Command(Address);
     afe:	66 0f       	add	r22, r22
     b00:	66 0f       	add	r22, r22
     b02:	66 0f       	add	r22, r22
     b04:	86 2f       	mov	r24, r22
     b06:	80 64       	ori	r24, 0x40	; 64
     b08:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
		for(Idx = 0; Idx < 8; Idx++){
			LCD_Write_Char(Data[Idx]);
     b10:	f8 01       	movw	r30, r16
     b12:	ec 0f       	add	r30, r28
     b14:	fd 1f       	adc	r31, r29
     b16:	80 81       	ld	r24, Z
     b18:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_Write_Char>
     b1c:	21 96       	adiw	r28, 0x01	; 1
void LCD_Write_CGRAM(const UINT8_t* Data, CGRAM_ROW_ID_t ROW_ID){
	UINT8_t Address, Idx;
	if(ROW_ID < CGRAM_MAX_ROWS){
		Address = (ROW_ID * 8) | (1 << 6);
		LCD_Send_Command(Address);
		for(Idx = 0; Idx < 8; Idx++){
     b1e:	c8 30       	cpi	r28, 0x08	; 8
     b20:	d1 05       	cpc	r29, r1
     b22:	b1 f7       	brne	.-20     	; 0xb10 <LCD_Write_CGRAM+0x20>
			LCD_Write_Char(Data[Idx]);
		}
	}
	LCD_Send_Command(0x02);
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	08 95       	ret

00000b34 <LCD_Clear>:
}
/*************************************************************************/
BOOL_t LCD_Clear(void){
	BOOL_t IsFinished = FALSE;
	static UINT8_t Cnt = 0;
	switch (Cnt) {
     b34:	80 91 14 01 	lds	r24, 0x0114
     b38:	88 23       	and	r24, r24
     b3a:	19 f0       	breq	.+6      	; 0xb42 <LCD_Clear+0xe>
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	89 f4       	brne	.+34     	; 0xb62 <LCD_Clear+0x2e>
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <LCD_Clear+0x1a>
	case 0:
		if (TRUE == LCD_Send_Command(0x00)) {
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	79 f4       	brne	.+30     	; 0xb6a <LCD_Clear+0x36>
     b4c:	06 c0       	rjmp	.+12     	; 0xb5a <LCD_Clear+0x26>
			Cnt = 1;
		}
		break;
	case 1:
		if (TRUE == LCD_Send_Command(0x01)) {
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	49 f4       	brne	.+18     	; 0xb6a <LCD_Clear+0x36>
			Cnt = 2;
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	80 93 14 01 	sts	0x0114, r24
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	08 95       	ret
		}
		break;
	default:
		Cnt = 0;
     b62:	10 92 14 01 	sts	0x0114, r1
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	08 95       	ret
     b6a:	80 e0       	ldi	r24, 0x00	; 0
		IsFinished = TRUE;
		break;
	}
	return IsFinished;
}
     b6c:	08 95       	ret

00000b6e <LCD_Jumb_To>:
	BOOL_t IsFinished=FALSE;
	/*
	 First Row Start from 0X00
	 Second Row Start From 0X40
	 */
	if (ROW < LCD_MAX_ROWS && COL < LCD_MAX_COLS) {
     b6e:	82 30       	cpi	r24, 0x02	; 2
     b70:	68 f4       	brcc	.+26     	; 0xb8c <LCD_Jumb_To+0x1e>
     b72:	60 31       	cpi	r22, 0x10	; 16
     b74:	58 f4       	brcc	.+22     	; 0xb8c <LCD_Jumb_To+0x1e>
		Address_Counter = ((0X40 * ROW) + COL) | (1 << 7); // To Write into DDRAM;
     b76:	82 95       	swap	r24
     b78:	88 0f       	add	r24, r24
     b7a:	88 0f       	add	r24, r24
     b7c:	80 7c       	andi	r24, 0xC0	; 192
     b7e:	86 0f       	add	r24, r22
     b80:	80 68       	ori	r24, 0x80	; 128
     b82:	80 93 19 01 	sts	0x0119, r24
		IsFinished=LCD_Send_Command(Address_Counter);
     b86:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     b8a:	08 95       	ret
     b8c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return IsFinished;
}
     b8e:	08 95       	ret

00000b90 <LCD_Disp_Special_Character>:
}
/*************************************************************************/
void LCD_Disp_Special_Character(const CGRAM_ROW_ID_t CGRAM_ROW_ID,
								 const LCD_ROW_ID_t ROW,
								 const LCD_COL_ID_t COL)
{
     b90:	1f 93       	push	r17
     b92:	18 2f       	mov	r17, r24
	if (ROW < LCD_MAX_ROWS && COL < LCD_MAX_COLS && CGRAM_ROW_ID < CGRAM_MAX_ROWS) {
     b94:	62 30       	cpi	r22, 0x02	; 2
     b96:	58 f4       	brcc	.+22     	; 0xbae <LCD_Disp_Special_Character+0x1e>
     b98:	40 31       	cpi	r20, 0x10	; 16
     b9a:	48 f4       	brcc	.+18     	; 0xbae <LCD_Disp_Special_Character+0x1e>
     b9c:	88 30       	cpi	r24, 0x08	; 8
     b9e:	38 f4       	brcc	.+14     	; 0xbae <LCD_Disp_Special_Character+0x1e>
		LCD_Jumb_To(ROW, COL);
     ba0:	86 2f       	mov	r24, r22
     ba2:	64 2f       	mov	r22, r20
     ba4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Jumb_To>
		LCD_Write_Char(CGRAM_ROW_ID);
     ba8:	81 2f       	mov	r24, r17
     baa:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_Write_Char>
	}

}
     bae:	1f 91       	pop	r17
     bb0:	08 95       	ret

00000bb2 <LCD_Jumb_ToAndWrite>:
}
/*************************************************************************/
void LCD_Jumb_ToAndWrite(const UINT8_t* Data,
						const LCD_ROW_ID_t ROW,
						const LCD_COL_ID_t COL)
{
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	ec 01       	movw	r28, r24
	if (ROW < LCD_MAX_ROWS && COL < LCD_MAX_COLS) {
     bb8:	62 30       	cpi	r22, 0x02	; 2
     bba:	48 f4       	brcc	.+18     	; 0xbce <LCD_Jumb_ToAndWrite+0x1c>
     bbc:	40 31       	cpi	r20, 0x10	; 16
     bbe:	38 f4       	brcc	.+14     	; 0xbce <LCD_Jumb_ToAndWrite+0x1c>
		LCD_Jumb_To(ROW, COL);
     bc0:	86 2f       	mov	r24, r22
     bc2:	64 2f       	mov	r22, r20
     bc4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Jumb_To>
		LCD_Disp_Str(Data);
     bc8:	ce 01       	movw	r24, r28
     bca:	0e 94 0a 05 	call	0xa14	; 0xa14 <LCD_Disp_Str>
	}

}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <LCD_Init>:
/*************************************************************************/

BOOL_t LCD_Init(void) {
	static UINT8_t Cnt=0;
	BOOL_t IsFinished=FALSE;
	switch(Cnt){
     bd4:	80 91 18 01 	lds	r24, 0x0118
     bd8:	85 30       	cpi	r24, 0x05	; 5
     bda:	09 f4       	brne	.+2      	; 0xbde <LCD_Init+0xa>
     bdc:	50 c0       	rjmp	.+160    	; 0xc7e <LCD_Init+0xaa>
     bde:	86 30       	cpi	r24, 0x06	; 6
     be0:	88 f4       	brcc	.+34     	; 0xc04 <LCD_Init+0x30>
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	09 f4       	brne	.+2      	; 0xbe8 <LCD_Init+0x14>
     be6:	40 c0       	rjmp	.+128    	; 0xc68 <LCD_Init+0x94>
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	30 f4       	brcc	.+12     	; 0xbf8 <LCD_Init+0x24>
     bec:	88 23       	and	r24, r24
     bee:	e1 f0       	breq	.+56     	; 0xc28 <LCD_Init+0x54>
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <LCD_Init+0x22>
     bf4:	71 c0       	rjmp	.+226    	; 0xcd8 <LCD_Init+0x104>
     bf6:	36 c0       	rjmp	.+108    	; 0xc64 <LCD_Init+0x90>
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	c1 f1       	breq	.+112    	; 0xc6c <LCD_Init+0x98>
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	09 f0       	breq	.+2      	; 0xc02 <LCD_Init+0x2e>
     c00:	6b c0       	rjmp	.+214    	; 0xcd8 <LCD_Init+0x104>
     c02:	36 c0       	rjmp	.+108    	; 0xc70 <LCD_Init+0x9c>
     c04:	88 30       	cpi	r24, 0x08	; 8
     c06:	09 f4       	brne	.+2      	; 0xc0a <LCD_Init+0x36>
     c08:	4f c0       	rjmp	.+158    	; 0xca8 <LCD_Init+0xd4>
     c0a:	89 30       	cpi	r24, 0x09	; 9
     c0c:	30 f4       	brcc	.+12     	; 0xc1a <LCD_Init+0x46>
     c0e:	86 30       	cpi	r24, 0x06	; 6
     c10:	e9 f1       	breq	.+122    	; 0xc8c <LCD_Init+0xb8>
     c12:	87 30       	cpi	r24, 0x07	; 7
     c14:	09 f0       	breq	.+2      	; 0xc18 <LCD_Init+0x44>
     c16:	60 c0       	rjmp	.+192    	; 0xcd8 <LCD_Init+0x104>
     c18:	40 c0       	rjmp	.+128    	; 0xc9a <LCD_Init+0xc6>
     c1a:	89 30       	cpi	r24, 0x09	; 9
     c1c:	09 f4       	brne	.+2      	; 0xc20 <LCD_Init+0x4c>
     c1e:	4e c0       	rjmp	.+156    	; 0xcbc <LCD_Init+0xe8>
     c20:	8a 30       	cpi	r24, 0x0A	; 10
     c22:	09 f0       	breq	.+2      	; 0xc26 <LCD_Init+0x52>
     c24:	59 c0       	rjmp	.+178    	; 0xcd8 <LCD_Init+0x104>
     c26:	51 c0       	rjmp	.+162    	; 0xcca <LCD_Init+0xf6>
	case 0:

		DIO_WRITE_PIN_VALUE(E_PIN_NUMBER, DIO_PIN_STATE_HIGH); // E should be high
     c28:	8c e1       	ldi	r24, 0x1C	; 28
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(RW_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  R/W
     c30:	8d e1       	ldi	r24, 0x1D	; 29
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(RS_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  RS
     c38:	8e e1       	ldi	r24, 0x1E	; 30
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D4_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D4
     c40:	88 e1       	ldi	r24, 0x18	; 24
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D5_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D5
     c48:	89 e1       	ldi	r24, 0x19	; 25
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D6_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D6
     c50:	8a e1       	ldi	r24, 0x1A	; 26
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(D7_PIN_NUMBER, DIO_PIN_STATE_LOW);   //  D7
     c58:	8b e1       	ldi	r24, 0x1B	; 27
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

		Cnt=1;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	28 c0       	rjmp	.+80     	; 0xcb4 <LCD_Init+0xe0>
		break;
	case 1:
		Cnt=2;
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	26 c0       	rjmp	.+76     	; 0xcb4 <LCD_Init+0xe0>
		break;
	case 2:
		Cnt=3;
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	24 c0       	rjmp	.+72     	; 0xcb4 <LCD_Init+0xe0>
		break;
	case 3:
		Cnt=4;
     c6c:	84 e0       	ldi	r24, 0x04	; 4
     c6e:	22 c0       	rjmp	.+68     	; 0xcb4 <LCD_Init+0xe0>
		break;
	case 4:
		if(TRUE==LCD_Send_Command(0X20)){
     c70:	80 e2       	ldi	r24, 0x20	; 32
     c72:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <LCD_Init+0x110>
			Cnt=5;
     c7a:	85 e0       	ldi	r24, 0x05	; 5
     c7c:	1b c0       	rjmp	.+54     	; 0xcb4 <LCD_Init+0xe0>
		}
		break;
	case 5:
		if (TRUE == LCD_Send_Command(0X20)) {
     c7e:	80 e2       	ldi	r24, 0x20	; 32
     c80:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	71 f5       	brne	.+92     	; 0xce4 <LCD_Init+0x110>
			Cnt = 6;
     c88:	86 e0       	ldi	r24, 0x06	; 6
     c8a:	14 c0       	rjmp	.+40     	; 0xcb4 <LCD_Init+0xe0>
		}
		break;
	case 6:
		if (TRUE == LCD_Send_Command(0X80)) {
     c8c:	80 e8       	ldi	r24, 0x80	; 128
     c8e:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	39 f5       	brne	.+78     	; 0xce4 <LCD_Init+0x110>
			Cnt = 7;
     c96:	87 e0       	ldi	r24, 0x07	; 7
     c98:	0d c0       	rjmp	.+26     	; 0xcb4 <LCD_Init+0xe0>
		}
		break;
	case 7:
		if (TRUE == LCD_Send_Command(0X00)) {
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	01 f5       	brne	.+64     	; 0xce4 <LCD_Init+0x110>
			Cnt = 8;
     ca4:	88 e0       	ldi	r24, 0x08	; 8
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <LCD_Init+0xe0>
		}
		break;
	case 8:
		if (TRUE == LCD_Send_Command(0XC0)) {
     ca8:	80 ec       	ldi	r24, 0xC0	; 192
     caa:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	c9 f4       	brne	.+50     	; 0xce4 <LCD_Init+0x110>
			Cnt = 9;
     cb2:	89 e0       	ldi	r24, 0x09	; 9
     cb4:	80 93 18 01 	sts	0x0118, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	08 95       	ret
		}
		break;
	case 9:
		if (TRUE == LCD_Send_Command(0X00)) {
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	79 f4       	brne	.+30     	; 0xce4 <LCD_Init+0x110>
			Cnt = 10;
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	f5 cf       	rjmp	.-22     	; 0xcb4 <LCD_Init+0xe0>
		}
		break;
	case 10:
		if (TRUE == LCD_Send_Command(0X10)) {
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	0e 94 17 05 	call	0xa2e	; 0xa2e <LCD_Send_Command>
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	41 f4       	brne	.+16     	; 0xce4 <LCD_Init+0x110>
			Cnt = 11;
     cd4:	8b e0       	ldi	r24, 0x0B	; 11
     cd6:	ee cf       	rjmp	.-36     	; 0xcb4 <LCD_Init+0xe0>
		}
		break;
	default:
		Configuration_Process = ENDED;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 16 01 	sts	0x0116, r24
		Cnt = 0;
     cde:	10 92 18 01 	sts	0x0118, r1
     ce2:	08 95       	ret
     ce4:	80 e0       	ldi	r24, 0x00	; 0
		IsFinished = TRUE;
		break;
	}

	return IsFinished;
}
     ce6:	08 95       	ret

00000ce8 <LCD_Update>:
		Length++;
	} while (Number /= 10);
	return Length;
}
/*************************************************************************/
BOOL_t LCD_Update(char*Str,LCD_ROW_ID_t ROW, LCD_COL_ID_t COL){
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
	static UINT8_t State=0, Idx=0;
	BOOL_t IsFinished=FALSE;
	switch (State) {
     cee:	90 91 13 01 	lds	r25, 0x0113
     cf2:	91 30       	cpi	r25, 0x01	; 1
     cf4:	51 f0       	breq	.+20     	; 0xd0a <LCD_Update+0x22>
     cf6:	91 30       	cpi	r25, 0x01	; 1
     cf8:	18 f0       	brcs	.+6      	; 0xd00 <LCD_Update+0x18>
     cfa:	92 30       	cpi	r25, 0x02	; 2
     cfc:	69 f5       	brne	.+90     	; 0xd58 <LCD_Update+0x70>
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <LCD_Update+0x36>
	case 0:
		if(TRUE==LCD_Init()){
     d00:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LCD_Init>
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	41 f5       	brne	.+80     	; 0xd58 <LCD_Update+0x70>
     d08:	07 c0       	rjmp	.+14     	; 0xd18 <LCD_Update+0x30>
			State=1;
		}
		break;
	case 1:
		if(TRUE==LCD_Jumb_To(ROW,COL)){
     d0a:	86 2f       	mov	r24, r22
     d0c:	64 2f       	mov	r22, r20
     d0e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Jumb_To>
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	09 f5       	brne	.+66     	; 0xd58 <LCD_Update+0x70>
			State=2;
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	80 93 13 01 	sts	0x0113, r24
     d1c:	1d c0       	rjmp	.+58     	; 0xd58 <LCD_Update+0x70>
		}
		break;
	case 2:
		if (Str[Idx] != '\0') {
     d1e:	80 91 12 01 	lds	r24, 0x0112
     d22:	fe 01       	movw	r30, r28
     d24:	e8 0f       	add	r30, r24
     d26:	f1 1d       	adc	r31, r1
     d28:	80 81       	ld	r24, Z
     d2a:	88 23       	and	r24, r24
     d2c:	a9 f0       	breq	.+42     	; 0xd58 <LCD_Update+0x70>
			if (TRUE == LCD_Write_Char(Str[Idx])) {
     d2e:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_Write_Char>
     d32:	98 2f       	mov	r25, r24
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	81 f4       	brne	.+32     	; 0xd58 <LCD_Update+0x70>
				++Idx;
     d38:	80 91 12 01 	lds	r24, 0x0112
     d3c:	8f 5f       	subi	r24, 0xFF	; 255
     d3e:	80 93 12 01 	sts	0x0112, r24
				if (Str[Idx] == '\0') {
     d42:	c8 0f       	add	r28, r24
     d44:	d1 1d       	adc	r29, r1
     d46:	88 81       	ld	r24, Y
     d48:	88 23       	and	r24, r24
     d4a:	31 f4       	brne	.+12     	; 0xd58 <LCD_Update+0x70>
					IsFinished = TRUE;
					Idx=0;
     d4c:	10 92 12 01 	sts	0x0112, r1
					State=1;
     d50:	90 93 13 01 	sts	0x0113, r25
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <LCD_Update+0x72>
     d58:	80 e0       	ldi	r24, 0x00	; 0
	default:
		break;

	}
	return IsFinished;
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <SPI_Set_State>:
SS_t SPI_Slave={
					{SS_DISABLE, SS_DISABLE, SS_DISABLE}
};
static void SPI_Update_Write(ECU_RM_t Room);
void SPI_Set_State(const SPI_STATE_t STATE){
	switch (STATE) {
     d60:	88 23       	and	r24, r24
     d62:	19 f0       	breq	.+6      	; 0xd6a <SPI_Set_State+0xa>
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	21 f4       	brne	.+8      	; 0xd70 <SPI_Set_State+0x10>
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <SPI_Set_State+0xe>
	case SPI_ENABLE:
		SET_BIT(SPCR, SPE);
     d6a:	6e 9a       	sbi	0x0d, 6	; 13
     d6c:	08 95       	ret
		break;
	case SPI_DISABLE:
		CLEAR_BIT(SPCR, SPE);
     d6e:	6e 98       	cbi	0x0d, 6	; 13
     d70:	08 95       	ret

00000d72 <SPI_Set_Mode>:
		break;
	}
}
void SPI_Set_Mode(const SPI_MODE_t MODE){
	switch (MODE) {
     d72:	88 23       	and	r24, r24
     d74:	19 f0       	breq	.+6      	; 0xd7c <SPI_Set_Mode+0xa>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	21 f4       	brne	.+8      	; 0xd82 <SPI_Set_Mode+0x10>
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <SPI_Set_Mode+0xe>
	case SPI_MASTER:
		SET_BIT(SPCR, MSTR);
     d7c:	6c 9a       	sbi	0x0d, 4	; 13
     d7e:	08 95       	ret
		break;
	case SPI_SLAVE:
		CLEAR_BIT(SPCR, MSTR);
     d80:	6c 98       	cbi	0x0d, 4	; 13
     d82:	08 95       	ret

00000d84 <SPI_Set_CLK>:
		break;
	}
}
void SPI_Set_CLK(const SPI_DF_t DF){
	SPCR &= 0xfc;
     d84:	9d b1       	in	r25, 0x0d	; 13
     d86:	9c 7f       	andi	r25, 0xFC	; 252
     d88:	9d b9       	out	0x0d, r25	; 13
	SPCR |= DF;
     d8a:	9d b1       	in	r25, 0x0d	; 13
     d8c:	98 2b       	or	r25, r24
     d8e:	9d b9       	out	0x0d, r25	; 13
	SPSR &=0xFE;
     d90:	70 98       	cbi	0x0e, 0	; 14
	SPSR |=(DF>>2);
     d92:	9e b1       	in	r25, 0x0e	; 14
     d94:	86 95       	lsr	r24
     d96:	86 95       	lsr	r24
     d98:	98 2b       	or	r25, r24
     d9a:	9e b9       	out	0x0e, r25	; 14
}
     d9c:	08 95       	ret

00000d9e <SPI_Tx_Rx>:
UINT8_t SPI_Tx_Rx(const UINT8_t CHAR){
	UINT8_t Tmp = SPDR;
     d9e:	9f b1       	in	r25, 0x0f	; 15
	SPDR=CHAR;
     da0:	8f b9       	out	0x0f, r24	; 15
	return Tmp;
}
     da2:	89 2f       	mov	r24, r25
     da4:	08 95       	ret

00000da6 <SPI_INT>:
void SPI_INT(const SPI_INT_t INT){
	switch (INT) {
     da6:	88 23       	and	r24, r24
     da8:	19 f0       	breq	.+6      	; 0xdb0 <SPI_INT+0xa>
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	21 f4       	brne	.+8      	; 0xdb6 <SPI_INT+0x10>
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <SPI_INT+0xe>
	case SPI_INT_DISABLE:
		CLEAR_BIT(SPCR, 7);
     db0:	6f 98       	cbi	0x0d, 7	; 13
     db2:	08 95       	ret
		break;
	case SPI_INT_ENABLE:
		SET_BIT(SPCR, 7);
     db4:	6f 9a       	sbi	0x0d, 7	; 13
     db6:	08 95       	ret

00000db8 <SPI_Update_Write>:
		//DIO_WRITE_PIN_VALUE(DIO_PIND0, 1^DIO_READ_PIN_VALUE(DIO_PIND0));
	}
#endif
}
static void SPI_Update_Write(ECU_RM_t Room)
{
     db8:	98 2f       	mov	r25, r24
	static UINT8_t Room_Write_State[ECU_MAX_ROOMS] = { 0 };
	static UINT8_t Coord=0;
	switch(Coord)
     dba:	80 91 1f 01 	lds	r24, 0x011F
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	71 f0       	breq	.+28     	; 0xdde <SPI_Update_Write+0x26>
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	18 f0       	brcs	.+6      	; 0xdcc <SPI_Update_Write+0x14>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	11 f5       	brne	.+68     	; 0xe0e <SPI_Update_Write+0x56>
     dca:	14 c0       	rjmp	.+40     	; 0xdf4 <SPI_Update_Write+0x3c>
	{
	case 0:
		if(ECU_OD_CNT_OFF==ECU_OD_Data.State)
     dcc:	80 91 32 01 	lds	r24, 0x0132
     dd0:	88 37       	cpi	r24, 0x78	; 120
     dd2:	e9 f4       	brne	.+58     	; 0xe0e <SPI_Update_Write+0x56>
		{
			SPI_Tx_Val=ECU_FRM_USUB;
     dd4:	80 e4       	ldi	r24, 0x40	; 64
     dd6:	80 93 3d 01 	sts	0x013D, r24
			Coord=1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	08 c0       	rjmp	.+16     	; 0xdee <SPI_Update_Write+0x36>
		}

		break;
	case 1:
		if (ECU_OD_CNT_OFF == ECU_OD_Data.State) {
     dde:	80 91 32 01 	lds	r24, 0x0132
     de2:	88 37       	cpi	r24, 0x78	; 120
     de4:	a1 f4       	brne	.+40     	; 0xe0e <SPI_Update_Write+0x56>
			SPI_Tx_Val = ECU_FRM_USUB;
     de6:	80 e4       	ldi	r24, 0x40	; 64
     de8:	80 93 3d 01 	sts	0x013D, r24
			Coord = 2;
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	80 93 1f 01 	sts	0x011F, r24
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <SPI_Update_Write+0x56>
		}

		break;
	case 2:
		if (ECU_OD_CNT_OFF == ECU_OD_Data.State) {
     df4:	80 91 32 01 	lds	r24, 0x0132
     df8:	88 37       	cpi	r24, 0x78	; 120
     dfa:	29 f4       	brne	.+10     	; 0xe06 <SPI_Update_Write+0x4e>
			SPI_Tx_Val = TMP_Back_Up;
     dfc:	80 91 ab 00 	lds	r24, 0x00AB
     e00:	80 93 3d 01 	sts	0x013D, r24
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <SPI_Update_Write+0x56>
		}else if(ECU_OD_CNT_ON == ECU_OD_Data.State)
     e06:	82 38       	cpi	r24, 0x82	; 130
     e08:	11 f4       	brne	.+4      	; 0xe0e <SPI_Update_Write+0x56>
		{
			Coord=0;
     e0a:	10 92 1f 01 	sts	0x011F, r1
		break;
	default:
		break;
	}

	if (ECU_RM_SUB_LIGHT == ECU_RM_Data[Room].SubLight
     e0e:	a9 2f       	mov	r26, r25
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	fd 01       	movw	r30, r26
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	ea 0f       	add	r30, r26
     e1e:	fb 1f       	adc	r31, r27
     e20:	ed 5c       	subi	r30, 0xCD	; 205
     e22:	fe 4f       	sbci	r31, 0xFE	; 254
     e24:	83 81       	ldd	r24, Z+3	; 0x03
     e26:	8e 30       	cpi	r24, 0x0E	; 14
     e28:	79 f5       	brne	.+94     	; 0xe88 <SPI_Update_Write+0xd0>
     e2a:	84 81       	ldd	r24, Z+4	; 0x04
     e2c:	8d 30       	cpi	r24, 0x0D	; 13
     e2e:	01 f5       	brne	.+64     	; 0xe70 <SPI_Update_Write+0xb8>
			&& ECU_RM_SUB_TMP == ECU_RM_Data[Room].SubTemp) {
		if (0 == Room_Write_State[Room]) {
     e30:	fd 01       	movw	r30, r26
     e32:	e0 5e       	subi	r30, 0xE0	; 224
     e34:	fe 4f       	sbci	r31, 0xFE	; 254
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	39 f4       	brne	.+14     	; 0xe4a <SPI_Update_Write+0x92>
			SPI_Tx_Val = ECU_FRM_TMP | ECU_OD_Data.Temp;
     e3c:	80 91 30 01 	lds	r24, 0x0130
     e40:	80 93 3d 01 	sts	0x013D, r24
			Room_Write_State[Room] = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 83       	st	Z, r24
     e48:	08 95       	ret
		} else if (1 == Room_Write_State[Room]) {
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	79 f4       	brne	.+30     	; 0xe6c <SPI_Update_Write+0xb4>
			if (ECU_OD_LIGHT_MORNING == ECU_OD_Data.Light) {
     e4e:	80 91 31 01 	lds	r24, 0x0131
     e52:	8c 38       	cpi	r24, 0x8C	; 140
     e54:	11 f4       	brne	.+4      	; 0xe5a <SPI_Update_Write+0xa2>
				SPI_Tx_Val = ECU_FRM_MORNING;
     e56:	80 ec       	ldi	r24, 0xC0	; 192
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <SPI_Update_Write+0xa8>
			} else if (ECU_OD_LIGHT_NIGHT == ECU_OD_Data.Light) {
     e5a:	86 39       	cpi	r24, 0x96	; 150
     e5c:	19 f4       	brne	.+6      	; 0xe64 <SPI_Update_Write+0xac>
				SPI_Tx_Val = ECU_FRM_NIGHT;
     e5e:	80 e8       	ldi	r24, 0x80	; 128
     e60:	80 93 3d 01 	sts	0x013D, r24
			} else {

			}

			Room_Write_State[Room] = 0;
     e64:	a0 5e       	subi	r26, 0xE0	; 224
     e66:	be 4f       	sbci	r27, 0xFE	; 254
     e68:	1c 92       	st	X, r1
     e6a:	08 95       	ret
		} else {
			Room_Write_State[Room] = 0;
     e6c:	10 82       	st	Z, r1
     e6e:	08 95       	ret
		}
	} else if (ECU_RM_SUB_LIGHT == ECU_RM_Data[Room].SubLight) {
		if (ECU_OD_LIGHT_MORNING == ECU_OD_Data.Light) {
     e70:	80 91 31 01 	lds	r24, 0x0131
     e74:	8c 38       	cpi	r24, 0x8C	; 140
     e76:	11 f4       	brne	.+4      	; 0xe7c <SPI_Update_Write+0xc4>
			SPI_Tx_Val = ECU_FRM_MORNING;
     e78:	80 ec       	ldi	r24, 0xC0	; 192
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <SPI_Update_Write+0xca>
		} else if (ECU_OD_LIGHT_NIGHT == ECU_OD_Data.Light) {
     e7c:	86 39       	cpi	r24, 0x96	; 150
     e7e:	59 f4       	brne	.+22     	; 0xe96 <SPI_Update_Write+0xde>
			SPI_Tx_Val = ECU_FRM_NIGHT;
     e80:	80 e8       	ldi	r24, 0x80	; 128
     e82:	80 93 3d 01 	sts	0x013D, r24
     e86:	08 95       	ret
		} else {

		}
	} else if (ECU_RM_SUB_TMP == ECU_RM_Data[Room].SubTemp) {
     e88:	84 81       	ldd	r24, Z+4	; 0x04
     e8a:	8d 30       	cpi	r24, 0x0D	; 13
     e8c:	21 f4       	brne	.+8      	; 0xe96 <SPI_Update_Write+0xde>
		SPI_Tx_Val = ECU_FRM_TMP | ECU_OD_Data.Temp;
     e8e:	80 91 30 01 	lds	r24, 0x0130
     e92:	80 93 3d 01 	sts	0x013D, r24
     e96:	08 95       	ret

00000e98 <__vector_12>:
	} else {

	}
}
ISR(SPI_VECT) {
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	8f 93       	push	r24
	SPI_Finished = TRUE;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 aa 00 	sts	0x00AA, r24
}
     eaa:	8f 91       	pop	r24
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <SPI_Update>:
	SPI_Set_CLK(SPI_DF4);
	SPI_Set_Mode(SPI_MASTER);
	SPI_INT(SPI_INT_DISABLE);
	SPI_Set_State(SPI_ENABLE);
}
void SPI_Update(void) {
     eb6:	1f 93       	push	r17
#if 1
	static SS_ECU_t SlaveSelector = SS_OD;
	static UINT8_t Cnt = 0;
	++Cnt;
     eb8:	80 91 1d 01 	lds	r24, 0x011D
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	80 93 1d 01 	sts	0x011D, r24
	switch (SlaveSelector) {
     ec2:	10 91 1e 01 	lds	r17, 0x011E
     ec6:	11 30       	cpi	r17, 0x01	; 1
     ec8:	19 f1       	breq	.+70     	; 0xf10 <SPI_Update+0x5a>
     eca:	11 30       	cpi	r17, 0x01	; 1
     ecc:	20 f0       	brcs	.+8      	; 0xed6 <SPI_Update+0x20>
     ece:	12 30       	cpi	r17, 0x02	; 2
     ed0:	09 f0       	breq	.+2      	; 0xed4 <SPI_Update+0x1e>
     ed2:	59 c0       	rjmp	.+178    	; 0xf86 <SPI_Update+0xd0>
     ed4:	3a c0       	rjmp	.+116    	; 0xf4a <SPI_Update+0x94>
	case SS_OD:

		DIO_WRITE_PIN_VALUE(DIO_PINC2, DIO_PIN_STATE_HIGH);/*RM2*/
     ed6:	82 e1       	ldi	r24, 0x12	; 18
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(DIO_PINC1, DIO_PIN_STATE_HIGH);/*RM1*/
     ede:	81 e1       	ldi	r24, 0x11	; 17
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(DIO_PINC0, DIO_PIN_STATE_LOW);/*OD*/
     ee6:	80 e1       	ldi	r24, 0x10	; 16
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

		SPI_Slave.Select[SS_OD] = SS_ENABLE;
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	90 93 1a 01 	sts	0x011A, r25
		SPI_Slave.Select[SS_RM1] = SS_DISABLE;
     ef4:	10 92 1b 01 	sts	0x011B, r1
		SPI_Slave.Select[SS_RM2] = SS_DISABLE;
     ef8:	10 92 1c 01 	sts	0x011C, r1
		if (MAX_DELAY == Cnt) {
     efc:	80 91 1d 01 	lds	r24, 0x011D
     f00:	87 31       	cpi	r24, 0x17	; 23
     f02:	09 f0       	breq	.+2      	; 0xf06 <SPI_Update+0x50>
     f04:	40 c0       	rjmp	.+128    	; 0xf86 <SPI_Update+0xd0>
			Cnt = 0;
     f06:	10 92 1d 01 	sts	0x011D, r1
			SlaveSelector = SS_RM1;
     f0a:	90 93 1e 01 	sts	0x011E, r25
     f0e:	3b c0       	rjmp	.+118    	; 0xf86 <SPI_Update+0xd0>
		}

		break;
	case SS_RM1:
		DIO_WRITE_PIN_VALUE(DIO_PINC0, DIO_PIN_STATE_HIGH);/*OD*/
     f10:	80 e1       	ldi	r24, 0x10	; 16
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(DIO_PINC2, DIO_PIN_STATE_HIGH);/*RM2*/
     f18:	82 e1       	ldi	r24, 0x12	; 18
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(DIO_PINC1, DIO_PIN_STATE_LOW);/*RM1*/
     f20:	81 e1       	ldi	r24, 0x11	; 17
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

		SPI_Slave.Select[SS_OD] = SS_DISABLE;
     f28:	10 92 1a 01 	sts	0x011A, r1
		SPI_Slave.Select[SS_RM1] = SS_ENABLE;
     f2c:	10 93 1b 01 	sts	0x011B, r17
		SPI_Slave.Select[SS_RM2] = SS_DISABLE;
     f30:	10 92 1c 01 	sts	0x011C, r1

		if (MAX_DELAY == Cnt) {
     f34:	80 91 1d 01 	lds	r24, 0x011D
     f38:	87 31       	cpi	r24, 0x17	; 23
     f3a:	29 f4       	brne	.+10     	; 0xf46 <SPI_Update+0x90>
			Cnt = 0;
     f3c:	10 92 1d 01 	sts	0x011D, r1
			SlaveSelector = SS_RM2;
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	80 93 1e 01 	sts	0x011E, r24
		}
		/*Update Writing */

		SPI_Update_Write(ECU_ROOM1);
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	1c c0       	rjmp	.+56     	; 0xf82 <SPI_Update+0xcc>
		break;
	case SS_RM2:
		DIO_WRITE_PIN_VALUE(DIO_PINC0, DIO_PIN_STATE_HIGH);/*OD*/
     f4a:	80 e1       	ldi	r24, 0x10	; 16
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(DIO_PINC1, DIO_PIN_STATE_HIGH);/*RM1*/
     f52:	81 e1       	ldi	r24, 0x11	; 17
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
		DIO_WRITE_PIN_VALUE(DIO_PINC2, DIO_PIN_STATE_LOW);/*RM2*/
     f5a:	82 e1       	ldi	r24, 0x12	; 18
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

		SPI_Slave.Select[SS_RM2] = SS_ENABLE;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	80 93 1c 01 	sts	0x011C, r24
		SPI_Slave.Select[SS_RM1] = SS_DISABLE;
     f68:	10 92 1b 01 	sts	0x011B, r1
		SPI_Slave.Select[SS_OD] = SS_DISABLE;
     f6c:	10 92 1a 01 	sts	0x011A, r1
		if (MAX_DELAY == Cnt) {
     f70:	80 91 1d 01 	lds	r24, 0x011D
     f74:	87 31       	cpi	r24, 0x17	; 23
     f76:	21 f4       	brne	.+8      	; 0xf80 <SPI_Update+0xca>
			SlaveSelector = SS_OD;
     f78:	10 92 1e 01 	sts	0x011E, r1
			Cnt = 0;
     f7c:	10 92 1d 01 	sts	0x011D, r1
		}
		SPI_Update_Write(ECU_ROOM2);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <SPI_Update_Write>
		break;
	default:
		break;
	}
	if (GET_BIT(SPSR, 7)) {
     f86:	8e b1       	in	r24, 0x0e	; 14
	}
	SPI_Curr_Reading = SPI_Tx_Rx(SPI_Tx_Val);
     f88:	80 91 3d 01 	lds	r24, 0x013D
	SPCR |= DF;
	SPSR &=0xFE;
	SPSR |=(DF>>2);
}
UINT8_t SPI_Tx_Rx(const UINT8_t CHAR){
	UINT8_t Tmp = SPDR;
     f8c:	9f b1       	in	r25, 0x0f	; 15
	SPDR=CHAR;
     f8e:	8f b9       	out	0x0f, r24	; 15
	default:
		break;
	}
	if (GET_BIT(SPSR, 7)) {
	}
	SPI_Curr_Reading = SPI_Tx_Rx(SPI_Tx_Val);
     f90:	90 93 3e 01 	sts	0x013E, r25
		SPI_Curr_Reading = SPI_Tx_Rx(tmp);
		SPI_Finished = FALSE;
		//DIO_WRITE_PIN_VALUE(DIO_PIND0, 1^DIO_READ_PIN_VALUE(DIO_PIND0));
	}
#endif
}
     f94:	1f 91       	pop	r17
     f96:	08 95       	ret

00000f98 <SPI_Qinit>:
		SET_BIT(SPCR, 7);
		break;
	}
}
void SPI_Qinit(void){
	DIO_WRITE_PIN_VALUE(DIO_PINC2, DIO_PIN_STATE_HIGH);/*RM2*/
     f98:	82 e1       	ldi	r24, 0x12	; 18
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(DIO_PINC1, DIO_PIN_STATE_HIGH);/*RM1*/
     fa0:	81 e1       	ldi	r24, 0x11	; 17
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>
	DIO_WRITE_PIN_VALUE(DIO_PINC0, DIO_PIN_STATE_LOW);/*OD*/
     fa8:	80 e1       	ldi	r24, 0x10	; 16
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WRITE_PIN_VALUE>

	SPI_Set_CLK(SPI_DF4);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Set_CLK>
	SPI_Set_Mode(SPI_MASTER);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	0e 94 b9 06 	call	0xd72	; 0xd72 <SPI_Set_Mode>
	SPI_INT(SPI_INT_DISABLE);
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0e 94 d3 06 	call	0xda6	; 0xda6 <SPI_INT>
	SPI_Set_State(SPI_ENABLE);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	0e 94 b0 06 	call	0xd60	; 0xd60 <SPI_Set_State>
}
     fc8:	08 95       	ret

00000fca <__vector_16>:
	if(TRUE == ADC_Finished){
		TMP_Back_Up = TMP_Sensor_Read();
		ADC_Finished = FALSE;
	}
}
ISR(ADC_VECT){
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1
     fd4:	8f 93       	push	r24
	ADC_Finished = TRUE;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	80 93 22 01 	sts	0x0122, r24
}
     fdc:	8f 91       	pop	r24
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <TMP_Sensor_Read>:
	ADC_Set_Prescaler(DF128);
	ADC_Interrupt(ENABLE);
	ADC(ENABLE);
	ADC_Conversion(START, TMP_SENSOR_CHANNEL);
}
UINT32_t TMP_Sensor_Read(void){
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
	SINT32_t Tmp = 0;
	Tmp = ADC_Read();
     ff0:	0e 94 7a 00 	call	0xf4	; 0xf4 <ADC_Read>
	Tmp = (((Tmp * 5000) / 1024)) / 10;
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	24 ef       	ldi	r18, 0xF4	; 244
     ffe:	31 e0       	ldi	r19, 0x01	; 1
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsi3>
    1008:	7b 01       	movw	r14, r22
    100a:	8c 01       	movw	r16, r24
	ADC_Conversion(START, TMP_SENSOR_CHANNEL);
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_Conversion>
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	15 95       	asr	r17
    1018:	07 95       	ror	r16
    101a:	f7 94       	ror	r15
    101c:	e7 94       	ror	r14
    101e:	8a 95       	dec	r24
    1020:	d1 f7       	brne	.-12     	; 0x1016 <TMP_Sensor_Read+0x2e>
	return Tmp;
}
    1022:	b7 01       	movw	r22, r14
    1024:	c8 01       	movw	r24, r16
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	08 95       	ret

00001030 <TMP_Update>:
void TMP_Update(void){
	if(TRUE == ADC_Finished){
    1030:	80 91 22 01 	lds	r24, 0x0122
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	61 f4       	brne	.+24     	; 0x1050 <TMP_Update+0x20>
		TMP_Back_Up = TMP_Sensor_Read();
    1038:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <TMP_Sensor_Read>
    103c:	60 93 ab 00 	sts	0x00AB, r22
    1040:	70 93 ac 00 	sts	0x00AC, r23
    1044:	80 93 ad 00 	sts	0x00AD, r24
    1048:	90 93 ae 00 	sts	0x00AE, r25
		ADC_Finished = FALSE;
    104c:	10 92 22 01 	sts	0x0122, r1
    1050:	08 95       	ret

00001052 <TMP_Sensor_Init>:
#include "TMP_SENSOR.h"
volatile static BOOL_t ADC_Finished = FALSE;
UINT32_t TMP_Back_Up = 40;
void TMP_Sensor_Init(void){
	ADC_Init();
    1052:	0e 94 78 00 	call	0xf0	; 0xf0 <ADC_Init>
	ADC_Set_Prescaler(DF128);
    1056:	87 e0       	ldi	r24, 0x07	; 7
    1058:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_Set_Prescaler>
	ADC_Interrupt(ENABLE);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_Interrupt>
	ADC(ENABLE);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	0e 94 49 00 	call	0x92	; 0x92 <ADC>
	ADC_Conversion(START, TMP_SENSOR_CHANNEL);
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_Conversion>
}
    1070:	08 95       	ret

00001072 <TMR0_Set_Prescaler>:
#include "TMR0.h"
void TMR0_Set_Prescaler(const TMR0_PRESCALER_t PRESCALER){
	TCCR0 &= 0XF8;
    1072:	93 b7       	in	r25, 0x33	; 51
    1074:	98 7f       	andi	r25, 0xF8	; 248
    1076:	93 bf       	out	0x33, r25	; 51
	TCCR0 |= PRESCALER;
    1078:	93 b7       	in	r25, 0x33	; 51
    107a:	98 2b       	or	r25, r24
    107c:	93 bf       	out	0x33, r25	; 51
}
    107e:	08 95       	ret

00001080 <TMR0_Mode>:
void TMR0_Mode(const TMR0_MODE_t MODE){
	switch (MODE) {
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	51 f0       	breq	.+20     	; 0x1098 <TMR0_Mode+0x18>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	28 f0       	brcs	.+10     	; 0x1092 <TMR0_Mode+0x12>
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	61 f0       	breq	.+24     	; 0x10a4 <TMR0_Mode+0x24>
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	b9 f4       	brne	.+46     	; 0x10be <TMR0_Mode+0x3e>
    1090:	10 c0       	rjmp	.+32     	; 0x10b2 <TMR0_Mode+0x32>
	case TMR0_NORMAL:
		CLEAR_BIT(TCCR0, 3);
    1092:	83 b7       	in	r24, 0x33	; 51
    1094:	87 7f       	andi	r24, 0xF7	; 247
    1096:	08 c0       	rjmp	.+16     	; 0x10a8 <TMR0_Mode+0x28>
		CLEAR_BIT(TCCR0, 6);
		break;
	case TMR0_PWM:
		SET_BIT(TCCR0, 6);
    1098:	83 b7       	in	r24, 0x33	; 51
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0, 3);
    109e:	83 b7       	in	r24, 0x33	; 51
    10a0:	87 7f       	andi	r24, 0xF7	; 247
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <TMR0_Mode+0x2e>
		break;
	case TMR0_CTC:
		SET_BIT(TCCR0, 3);
    10a4:	83 b7       	in	r24, 0x33	; 51
    10a6:	88 60       	ori	r24, 0x08	; 8
    10a8:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0, 6);
    10aa:	83 b7       	in	r24, 0x33	; 51
    10ac:	8f 7b       	andi	r24, 0xBF	; 191
    10ae:	83 bf       	out	0x33, r24	; 51
    10b0:	08 95       	ret
		break;
	case TMR0_FAST_PWM:
		SET_BIT(TCCR0, 3);
    10b2:	83 b7       	in	r24, 0x33	; 51
    10b4:	88 60       	ori	r24, 0x08	; 8
    10b6:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, 6);
    10b8:	83 b7       	in	r24, 0x33	; 51
    10ba:	80 64       	ori	r24, 0x40	; 64
    10bc:	83 bf       	out	0x33, r24	; 51
    10be:	08 95       	ret

000010c0 <TMR0_INT>:
void TMR0_Init(void){
	TMR0_Set_Buffer(TMR0_TCNTR, 0);
	TMR0_Set_Buffer(TMR0_OCR, 0);
}
void TMR0_INT(const TMR0_INT_t INT){
	switch(INT){
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	51 f0       	breq	.+20     	; 0x10d8 <TMR0_INT+0x18>
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	28 f0       	brcs	.+10     	; 0x10d2 <TMR0_INT+0x12>
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	49 f0       	breq	.+18     	; 0x10de <TMR0_INT+0x1e>
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	71 f4       	brne	.+28     	; 0x10ec <TMR0_INT+0x2c>
    10d0:	0a c0       	rjmp	.+20     	; 0x10e6 <TMR0_INT+0x26>
	case TMR0_OV_INT_ENABLE:
		SET_BIT(TIMSK, 0);
    10d2:	89 b7       	in	r24, 0x39	; 57
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <TMR0_INT+0x22>
		break;
	case TMR0_OV_INT_DISABLE:
		CLEAR_BIT(TIMSK, 0);
    10d8:	89 b7       	in	r24, 0x39	; 57
    10da:	8e 7f       	andi	r24, 0xFE	; 254
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <TMR0_INT+0x22>
		break;
	case TMR0_OC_INT_ENABLE:
		SET_BIT(TIMSK, 1);
    10de:	89 b7       	in	r24, 0x39	; 57
    10e0:	82 60       	ori	r24, 0x02	; 2
    10e2:	89 bf       	out	0x39, r24	; 57
    10e4:	08 95       	ret
		break;
	case TMR0_OC_INT_DISABLE:
		CLEAR_BIT(TIMSK, 1);
    10e6:	89 b7       	in	r24, 0x39	; 57
    10e8:	8d 7f       	andi	r24, 0xFD	; 253
    10ea:	89 bf       	out	0x39, r24	; 57
    10ec:	08 95       	ret

000010ee <TMR0_OC0>:
		break;
	}
}
void TMR0_OC0(const TMR0_OC0_t STATE){
	CLEAR_BIT(TCCR0, 4);
    10ee:	93 b7       	in	r25, 0x33	; 51
    10f0:	9f 7e       	andi	r25, 0xEF	; 239
    10f2:	93 bf       	out	0x33, r25	; 51
	CLEAR_BIT(TCCR0, 5);
    10f4:	93 b7       	in	r25, 0x33	; 51
    10f6:	9f 7d       	andi	r25, 0xDF	; 223
    10f8:	93 bf       	out	0x33, r25	; 51
	TCCR0 |= (STATE << 4);
    10fa:	93 b7       	in	r25, 0x33	; 51
    10fc:	82 95       	swap	r24
    10fe:	80 7f       	andi	r24, 0xF0	; 240
    1100:	98 2b       	or	r25, r24
    1102:	93 bf       	out	0x33, r25	; 51
}
    1104:	08 95       	ret

00001106 <TMR0_Set_Buffer>:
void TMR0_Set_Buffer(const TMR0_BFF_t BUFFER, const UINT8_t VALUE){
	switch (BUFFER) {
    1106:	88 23       	and	r24, r24
    1108:	19 f0       	breq	.+6      	; 0x1110 <TMR0_Set_Buffer+0xa>
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	21 f4       	brne	.+8      	; 0x1116 <TMR0_Set_Buffer+0x10>
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <TMR0_Set_Buffer+0xe>
	case TMR0_TCNTR:
		TCNT0 = VALUE;
    1110:	62 bf       	out	0x32, r22	; 50
    1112:	08 95       	ret
		break;
	case TMR0_OCR:
		OCR0 = VALUE;
    1114:	6c bf       	out	0x3c, r22	; 60
    1116:	08 95       	ret

00001118 <TMR0_Init>:
		SET_BIT(TCCR0, 6);
		break;
	}
}
void TMR0_Init(void){
	TMR0_Set_Buffer(TMR0_TCNTR, 0);
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	0e 94 83 08 	call	0x1106	; 0x1106 <TMR0_Set_Buffer>
	TMR0_Set_Buffer(TMR0_OCR, 0);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	0e 94 83 08 	call	0x1106	; 0x1106 <TMR0_Set_Buffer>
}
    1128:	08 95       	ret

0000112a <TMR0_Read_Buffer>:

	}
}
UINT8_t TMR0_Read_Buffer(const TMR0_BFF_t BUFFER){
	UINT8_t Buffer = 0;
	switch (BUFFER) {
    112a:	88 23       	and	r24, r24
    112c:	21 f0       	breq	.+8      	; 0x1136 <TMR0_Read_Buffer+0xc>
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	21 f0       	breq	.+8      	; 0x113a <TMR0_Read_Buffer+0x10>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	08 95       	ret
		case TMR0_TCNTR:
			Buffer = TCNT0;
    1136:	82 b7       	in	r24, 0x32	; 50
    1138:	08 95       	ret
			break;
		case TMR0_OCR:
			Buffer = OCR0;
    113a:	8c b7       	in	r24, 0x3c	; 60
			break;
		default:
			break;
		}
	return Buffer;
}
    113c:	08 95       	ret

0000113e <WDT_Enable>:
#ifndef WDT_H
#include "WDT.h"
void WDT_Enable(void){
	SET_BIT(WDTCR, 3);
    113e:	81 b5       	in	r24, 0x21	; 33
    1140:	88 60       	ori	r24, 0x08	; 8
    1142:	81 bd       	out	0x21, r24	; 33
}
    1144:	08 95       	ret

00001146 <WDT_Priode>:
void WDT_Priode(const WDT_PERIODE_t PERIODE){
	WDTCR &= 0XF8;
    1146:	91 b5       	in	r25, 0x21	; 33
    1148:	98 7f       	andi	r25, 0xF8	; 248
    114a:	91 bd       	out	0x21, r25	; 33
	WDTCR |= PERIODE;
    114c:	91 b5       	in	r25, 0x21	; 33
    114e:	98 2b       	or	r25, r24
    1150:	91 bd       	out	0x21, r25	; 33
}
    1152:	08 95       	ret

00001154 <WDT_Refresh>:
void WDT_Refresh(void){
	asm volatile("wdr");
    1154:	a8 95       	wdr
}
    1156:	08 95       	ret

00001158 <WDT_Disable>:
void WDT_Disable(void){
	SET_BIT(WDTCR, 3);
    1158:	81 b5       	in	r24, 0x21	; 33
    115a:	88 60       	ori	r24, 0x08	; 8
    115c:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR, 4);
    115e:	81 b5       	in	r24, 0x21	; 33
    1160:	80 61       	ori	r24, 0x10	; 16
    1162:	81 bd       	out	0x21, r24	; 33
	CLEAR_BIT(WDTCR, 3);
    1164:	81 b5       	in	r24, 0x21	; 33
    1166:	87 7f       	andi	r24, 0xF7	; 247
    1168:	81 bd       	out	0x21, r24	; 33
}
    116a:	08 95       	ret

0000116c <WDT_Qinit>:
#include "WDT.h"
void WDT_Enable(void){
	SET_BIT(WDTCR, 3);
}
void WDT_Priode(const WDT_PERIODE_t PERIODE){
	WDTCR &= 0XF8;
    116c:	81 b5       	in	r24, 0x21	; 33
    116e:	88 7f       	andi	r24, 0xF8	; 248
    1170:	81 bd       	out	0x21, r24	; 33
	WDTCR |= PERIODE;
    1172:	81 b5       	in	r24, 0x21	; 33
    1174:	86 60       	ori	r24, 0x06	; 6
    1176:	81 bd       	out	0x21, r24	; 33
#ifndef WDT_H
#include "WDT.h"
void WDT_Enable(void){
	SET_BIT(WDTCR, 3);
    1178:	81 b5       	in	r24, 0x21	; 33
    117a:	88 60       	ori	r24, 0x08	; 8
    117c:	81 bd       	out	0x21, r24	; 33
}
void WDT_Qinit(void)
{
	WDT_Priode(WDT_1000_MS);
	WDT_Enable();
}
    117e:	08 95       	ret

00001180 <main>:
#include "ECU_RM.h"
#include "WDT.h"

int main(void)
{
	DIO_INIT();
    1180:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_INIT>
	TMP_Sensor_Init();
    1184:	0e 94 29 08 	call	0x1052	; 0x1052 <TMP_Sensor_Init>
	SPI_Qinit();
    1188:	0e 94 cc 07 	call	0xf98	; 0xf98 <SPI_Qinit>
	WDT_Qinit();
    118c:	0e 94 b6 08 	call	0x116c	; 0x116c <WDT_Qinit>
	CO_SCH_Init();
    1190:	0e 94 24 01 	call	0x248	; 0x248 <CO_SCH_Init>
	CO_SCH_Add_Task(SPI_Update, 0, 20);
    1194:	8b e5       	ldi	r24, 0x5B	; 91
    1196:	97 e0       	ldi	r25, 0x07	; 7
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	44 e1       	ldi	r20, 0x14	; 20
    119c:	0e 94 a3 00 	call	0x146	; 0x146 <CO_SCH_Add_Task>
	CO_SCH_Add_Task(ECU_OD_Update_Info, 0, 20);
    11a0:	89 ef       	ldi	r24, 0xF9	; 249
    11a2:	92 e0       	ldi	r25, 0x02	; 2
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	44 e1       	ldi	r20, 0x14	; 20
    11a8:	0e 94 a3 00 	call	0x146	; 0x146 <CO_SCH_Add_Task>
	CO_SCH_Add_Task(ECU_RM_Update_Info, 0, 20);
    11ac:	81 ea       	ldi	r24, 0xA1	; 161
    11ae:	93 e0       	ldi	r25, 0x03	; 3
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	44 e1       	ldi	r20, 0x14	; 20
    11b4:	0e 94 a3 00 	call	0x146	; 0x146 <CO_SCH_Add_Task>
	CO_SCH_Add_Task(DISP_Update, 0, 10);
    11b8:	80 e1       	ldi	r24, 0x10	; 16
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	4a e0       	ldi	r20, 0x0A	; 10
    11c0:	0e 94 a3 00 	call	0x146	; 0x146 <CO_SCH_Add_Task>
	CO_SCH_Add_Task(TMP_Update, 0, 20);
    11c4:	88 e1       	ldi	r24, 0x18	; 24
    11c6:	98 e0       	ldi	r25, 0x08	; 8
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	44 e1       	ldi	r20, 0x14	; 20
    11cc:	0e 94 a3 00 	call	0x146	; 0x146 <CO_SCH_Add_Task>
	CO_SCH_Add_Task(WDT_Refresh, 0, 100);
    11d0:	8a ea       	ldi	r24, 0xAA	; 170
    11d2:	98 e0       	ldi	r25, 0x08	; 8
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	44 e6       	ldi	r20, 0x64	; 100
    11d8:	0e 94 a3 00 	call	0x146	; 0x146 <CO_SCH_Add_Task>
	CO_SCH_Start();
    11dc:	0e 94 19 01 	call	0x232	; 0x232 <CO_SCH_Start>
	SPI_Update();
    11e0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <SPI_Update>
	while(1)
	{
		CO_SCH_Dispatch_Tasks();
    11e4:	0e 94 cb 00 	call	0x196	; 0x196 <CO_SCH_Dispatch_Tasks>
    11e8:	fd cf       	rjmp	.-6      	; 0x11e4 <main+0x64>

000011ea <__mulsi3>:
    11ea:	62 9f       	mul	r22, r18
    11ec:	d0 01       	movw	r26, r0
    11ee:	73 9f       	mul	r23, r19
    11f0:	f0 01       	movw	r30, r0
    11f2:	82 9f       	mul	r24, r18
    11f4:	e0 0d       	add	r30, r0
    11f6:	f1 1d       	adc	r31, r1
    11f8:	64 9f       	mul	r22, r20
    11fa:	e0 0d       	add	r30, r0
    11fc:	f1 1d       	adc	r31, r1
    11fe:	92 9f       	mul	r25, r18
    1200:	f0 0d       	add	r31, r0
    1202:	83 9f       	mul	r24, r19
    1204:	f0 0d       	add	r31, r0
    1206:	74 9f       	mul	r23, r20
    1208:	f0 0d       	add	r31, r0
    120a:	65 9f       	mul	r22, r21
    120c:	f0 0d       	add	r31, r0
    120e:	99 27       	eor	r25, r25
    1210:	72 9f       	mul	r23, r18
    1212:	b0 0d       	add	r27, r0
    1214:	e1 1d       	adc	r30, r1
    1216:	f9 1f       	adc	r31, r25
    1218:	63 9f       	mul	r22, r19
    121a:	b0 0d       	add	r27, r0
    121c:	e1 1d       	adc	r30, r1
    121e:	f9 1f       	adc	r31, r25
    1220:	bd 01       	movw	r22, r26
    1222:	cf 01       	movw	r24, r30
    1224:	11 24       	eor	r1, r1
    1226:	08 95       	ret

00001228 <__udivmodqi4>:
    1228:	99 1b       	sub	r25, r25
    122a:	79 e0       	ldi	r23, 0x09	; 9
    122c:	04 c0       	rjmp	.+8      	; 0x1236 <__udivmodqi4_ep>

0000122e <__udivmodqi4_loop>:
    122e:	99 1f       	adc	r25, r25
    1230:	96 17       	cp	r25, r22
    1232:	08 f0       	brcs	.+2      	; 0x1236 <__udivmodqi4_ep>
    1234:	96 1b       	sub	r25, r22

00001236 <__udivmodqi4_ep>:
    1236:	88 1f       	adc	r24, r24
    1238:	7a 95       	dec	r23
    123a:	c9 f7       	brne	.-14     	; 0x122e <__udivmodqi4_loop>
    123c:	80 95       	com	r24
    123e:	08 95       	ret

00001240 <__udivmodhi4>:
    1240:	aa 1b       	sub	r26, r26
    1242:	bb 1b       	sub	r27, r27
    1244:	51 e1       	ldi	r21, 0x11	; 17
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <__udivmodhi4_ep>

00001248 <__udivmodhi4_loop>:
    1248:	aa 1f       	adc	r26, r26
    124a:	bb 1f       	adc	r27, r27
    124c:	a6 17       	cp	r26, r22
    124e:	b7 07       	cpc	r27, r23
    1250:	10 f0       	brcs	.+4      	; 0x1256 <__udivmodhi4_ep>
    1252:	a6 1b       	sub	r26, r22
    1254:	b7 0b       	sbc	r27, r23

00001256 <__udivmodhi4_ep>:
    1256:	88 1f       	adc	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	5a 95       	dec	r21
    125c:	a9 f7       	brne	.-22     	; 0x1248 <__udivmodhi4_loop>
    125e:	80 95       	com	r24
    1260:	90 95       	com	r25
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	08 95       	ret

00001268 <_exit>:
    1268:	f8 94       	cli

0000126a <__stop_program>:
    126a:	ff cf       	rjmp	.-2      	; 0x126a <__stop_program>
